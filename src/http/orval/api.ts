/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * API MD
 * API respons√°vel por gerenciar as opera√ß√µes de uma loja virtual. Atrav√©s desta API √© poss√≠vel realizar opera√ß√µes de cadastro, listagem, atualiza√ß√£o e remo√ß√£o de clientes, colaboradores, fornecedores, produtos, pedidos, dentre outras opera√ß√µes. A API √© protegida por token de autentica√ß√£o JWT, que deve ser enviado no header da requisi√ß√£o como Bearer Token. Para obter o token de autentica√ß√£o, √© necess√°rio realizar uma requisi√ß√£o no endpoint de autentica√ß√£o, passando as credenciais do usu√°rio. A documenta√ß√£o completa da API pode ser acessada em http://localhost:3000/docs.
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { http } from '../client';
export interface FileUpload {
  /** Arquivo de imagem a ser enviado */
  file?: Blob;
}

export type PostUsersBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  email: string;
  /** @minLength 6 */
  password: string;
};

/**
 * Usu√°rio cadastrado com sucesso.
 * @nullable
 */
export type PostUsers201 = typeof PostUsers201[keyof typeof PostUsers201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsers201 = {
  null: 'null',
} as const;

/**
 * Este email j√° est√° cadastrado em nossa base de dados.
 */
export type PostUsers409 = {
  message: string;
};

export type PostSessionsPasswordBody = {
  /** @minLength 1 */
  email: string;
  /** @minLength 6 */
  password: string;
};

/**
 * Usu√°rio autenticado com sucesso.
 */
export type PostSessionsPassword200 = {
  access_token: string;
  refresh_token: string;
};

/**
 * E-mail ou senha incorretos.
 */
export type PostSessionsPassword400 = {
  message: string;
};

export type GetUsersProfile200Role = typeof GetUsersProfile200Role[keyof typeof GetUsersProfile200Role];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersProfile200Role = {
  MEMBER: 'MEMBER',
  ADMIN: 'ADMIN',
} as const;

/**
 * Informa√ß√µes do perfil do usu√°rio obtidas com sucesso.
 */
export type GetUsersProfile200 = {
  id: string;
  name: string;
  email: string;
  role: GetUsersProfile200Role;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetUsersProfile401 = {
  message: string;
};

/**
 * Usu√°rio n√£o encontrado.
 */
export type GetUsersProfile404 = {
  message: string;
};

export type PostCustomersBodyDocumentType = typeof PostCustomersBodyDocumentType[keyof typeof PostCustomersBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostCustomersBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PostCustomersBodyGender = typeof PostCustomersBodyGender[keyof typeof PostCustomersBodyGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostCustomersBodyGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type PostCustomersBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PostCustomersBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  gender?: PostCustomersBodyGender;
  birth_date?: string;
  problematic?: boolean;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Cliente cadastrado com sucesso.
 * @nullable
 */
export type PostCustomers201 = typeof PostCustomers201[keyof typeof PostCustomers201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostCustomers201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostCustomers401 = {
  message: string;
};

/**
 * Cliente j√° cadastrado.
 */
export type PostCustomers409 = {
  message: string;
};

export type GetCustomersParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetCustomersOrderBy;
customerName?: string;
customerDocument?: string;
};

export type GetCustomersOrderBy = typeof GetCustomersOrderBy[keyof typeof GetCustomersOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetCustomersOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetCustomers200CustomersItemDocumentType = typeof GetCustomers200CustomersItemDocumentType[keyof typeof GetCustomers200CustomersItemDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetCustomers200CustomersItemDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type GetCustomers200CustomersItem = {
  id: string;
  name: string;
  document_type: GetCustomers200CustomersItemDocumentType;
  document: string;
  user_id: string;
  entry_number: number;
  person_id: string;
};

/**
 * Clientes obtidos com sucesso.
 */
export type GetCustomers200 = {
  totalCount: number;
  pageCount: number;
  customers: GetCustomers200CustomersItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetCustomers401 = {
  message: string;
};

/**
 * Cliente n√£o encontrado.
 */
export type GetCustomers404 = {
  message: string;
};

export type GetCustomersId200DocumentType = typeof GetCustomersId200DocumentType[keyof typeof GetCustomersId200DocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetCustomersId200DocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

/**
 * @nullable
 */
export type GetCustomersId200Gender = typeof GetCustomersId200Gender[keyof typeof GetCustomersId200Gender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetCustomersId200Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type GetCustomersId200AddressesItemPlatform = typeof GetCustomersId200AddressesItemPlatform[keyof typeof GetCustomersId200AddressesItemPlatform];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetCustomersId200AddressesItemPlatform = {
  SHOPEE: 'SHOPEE',
  MERCADO_LIVRE: 'MERCADO_LIVRE',
  TRAY: 'TRAY',
  LOCAL: 'LOCAL',
} as const;

export type GetCustomersId200AddressesItem = {
  id: string;
  number: string;
  created_at: string;
  updated_at: string;
  recipient_name: string;
  recipient_phone: string;
  cep: string;
  street: string;
  /** @nullable */
  complement: string | null;
  neighborhood: string;
  city: string;
  state: string;
  platform: GetCustomersId200AddressesItemPlatform;
};

/**
 * Cliente obtido com sucesso.
 */
export type GetCustomersId200 = {
  id: string;
  name: string;
  phone: string;
  /** @nullable */
  phone_2: string | null;
  document_type: GetCustomersId200DocumentType;
  document: string;
  /** @nullable */
  document_2: string | null;
  /** @nullable */
  email: string | null;
  /** @nullable */
  state_registration: string | null;
  tax_free: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
  entry_number: number;
  /** @nullable */
  gender: GetCustomersId200Gender;
  /** @nullable */
  birth_date: string | null;
  problematic: boolean;
  person_id: string;
  addresses: GetCustomersId200AddressesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetCustomersId401 = {
  message: string;
};

/**
 * Cliente n√£o encontrado.
 */
export type GetCustomersId404 = {
  message: string;
};

export type PutCustomersIdBodyDocumentType = typeof PutCustomersIdBodyDocumentType[keyof typeof PutCustomersIdBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutCustomersIdBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PutCustomersIdBodyGender = typeof PutCustomersIdBodyGender[keyof typeof PutCustomersIdBodyGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutCustomersIdBodyGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type PutCustomersIdBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PutCustomersIdBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  gender?: PutCustomersIdBodyGender;
  birth_date?: string;
  problematic?: boolean;
  /**
   * @minLength 1
   * @pattern ^[cC][^\s-]{8,}$
   */
  address_id: string;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Cliente atualizado com sucesso.
 * @nullable
 */
export type PutCustomersId200 = typeof PutCustomersId200[keyof typeof PutCustomersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutCustomersId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutCustomersId401 = {
  message: string;
};

/**
 * Cliente n√£o encontrado.
 */
export type PutCustomersId404 = {
  message: string;
};

/**
 * Cliente deletado com sucesso.
 * @nullable
 */
export type DeleteCustomersId200 = typeof DeleteCustomersId200[keyof typeof DeleteCustomersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteCustomersId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteCustomersId401 = {
  message: string;
};

/**
 * Cliente n√£o encontrado.
 */
export type DeleteCustomersId404 = {
  message: string;
};

export type PostSuppliersBodyDocumentType = typeof PostSuppliersBodyDocumentType[keyof typeof PostSuppliersBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostSuppliersBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PostSuppliersBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PostSuppliersBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Fornecedor cadastrado com sucesso.
 * @nullable
 */
export type PostSuppliers201 = typeof PostSuppliers201[keyof typeof PostSuppliers201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostSuppliers201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostSuppliers401 = {
  message: string;
};

/**
 * Fornecedor j√° cadastrado.
 */
export type PostSuppliers409 = {
  message: string;
};

export type GetSuppliersParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetSuppliersOrderBy;
supplierName?: string;
supplierDocument?: string;
};

export type GetSuppliersOrderBy = typeof GetSuppliersOrderBy[keyof typeof GetSuppliersOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSuppliersOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetSuppliers200SuppliersItemDocumentType = typeof GetSuppliers200SuppliersItemDocumentType[keyof typeof GetSuppliers200SuppliersItemDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSuppliers200SuppliersItemDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type GetSuppliers200SuppliersItem = {
  id: string;
  name: string;
  document_type: GetSuppliers200SuppliersItemDocumentType;
  document: string;
  user_id: string;
  entry_number: number;
  person_id: string;
};

/**
 * Fornecedores obtidos com sucesso.
 */
export type GetSuppliers200 = {
  totalCount: number;
  pageCount: number;
  suppliers: GetSuppliers200SuppliersItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetSuppliers401 = {
  message: string;
};

/**
 * Fornecedor n√£o encontrado.
 */
export type GetSuppliers404 = {
  message: string;
};

export type GetSuppliersId200DocumentType = typeof GetSuppliersId200DocumentType[keyof typeof GetSuppliersId200DocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSuppliersId200DocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type GetSuppliersId200AddressesItemPlatform = typeof GetSuppliersId200AddressesItemPlatform[keyof typeof GetSuppliersId200AddressesItemPlatform];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetSuppliersId200AddressesItemPlatform = {
  SHOPEE: 'SHOPEE',
  MERCADO_LIVRE: 'MERCADO_LIVRE',
  TRAY: 'TRAY',
  LOCAL: 'LOCAL',
} as const;

export type GetSuppliersId200AddressesItem = {
  number: string;
  id: string;
  created_at: string;
  updated_at: string;
  recipient_name: string;
  recipient_phone: string;
  cep: string;
  street: string;
  /** @nullable */
  complement: string | null;
  neighborhood: string;
  city: string;
  state: string;
  platform: GetSuppliersId200AddressesItemPlatform;
};

/**
 * Fornecedor obtido com sucesso.
 */
export type GetSuppliersId200 = {
  id: string;
  name: string;
  phone: string;
  /** @nullable */
  phone_2: string | null;
  document_type: GetSuppliersId200DocumentType;
  document: string;
  /** @nullable */
  document_2: string | null;
  /** @nullable */
  email: string | null;
  /** @nullable */
  state_registration: string | null;
  tax_free: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
  entry_number: number;
  person_id: string;
  addresses: GetSuppliersId200AddressesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetSuppliersId401 = {
  message: string;
};

/**
 * Fornecedor n√£o encontrado.
 */
export type GetSuppliersId404 = {
  message: string;
};

export type PutSuppliersIdBodyDocumentType = typeof PutSuppliersIdBodyDocumentType[keyof typeof PutSuppliersIdBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutSuppliersIdBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PutSuppliersIdBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PutSuppliersIdBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  /**
   * @minLength 1
   * @pattern ^[cC][^\s-]{8,}$
   */
  address_id: string;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Fornecedor atualizado com sucesso.
 * @nullable
 */
export type PutSuppliersId200 = typeof PutSuppliersId200[keyof typeof PutSuppliersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutSuppliersId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutSuppliersId401 = {
  message: string;
};

/**
 * Fornecedor n√£o encontrado.
 */
export type PutSuppliersId404 = {
  message: string;
};

/**
 * Fornecedor deletado com sucesso.
 * @nullable
 */
export type DeleteSuppliersId200 = typeof DeleteSuppliersId200[keyof typeof DeleteSuppliersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteSuppliersId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteSuppliersId401 = {
  message: string;
};

/**
 * Fornecedor n√£o encontrado.
 */
export type DeleteSuppliersId404 = {
  message: string;
};

export type PostEmployeesBodyDocumentType = typeof PostEmployeesBodyDocumentType[keyof typeof PostEmployeesBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostEmployeesBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PostEmployeesBodyGender = typeof PostEmployeesBodyGender[keyof typeof PostEmployeesBodyGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostEmployeesBodyGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type PostEmployeesBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PostEmployeesBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  gender?: PostEmployeesBodyGender;
  birth_date?: string;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Colaborador cadastrado com sucesso.
 * @nullable
 */
export type PostEmployees201 = typeof PostEmployees201[keyof typeof PostEmployees201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostEmployees201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostEmployees401 = {
  message: string;
};

/**
 * Colaborador j√° cadastrado.
 */
export type PostEmployees409 = {
  message: string;
};

export type GetEmployeesParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetEmployeesOrderBy;
employeeName?: string;
employeeDocument?: string;
};

export type GetEmployeesOrderBy = typeof GetEmployeesOrderBy[keyof typeof GetEmployeesOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEmployeesOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetEmployees200EmployeesItemDocumentType = typeof GetEmployees200EmployeesItemDocumentType[keyof typeof GetEmployees200EmployeesItemDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEmployees200EmployeesItemDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type GetEmployees200EmployeesItem = {
  id: string;
  name: string;
  document_type: GetEmployees200EmployeesItemDocumentType;
  document: string;
  user_id: string;
  entry_number: number;
  person_id: string;
};

/**
 * Colaboradores obtidos com sucesso.
 */
export type GetEmployees200 = {
  totalCount: number;
  pageCount: number;
  employees: GetEmployees200EmployeesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetEmployees401 = {
  message: string;
};

/**
 * Colaborador n√£o encontrado.
 */
export type GetEmployees404 = {
  message: string;
};

export type GetEmployeesId200DocumentType = typeof GetEmployeesId200DocumentType[keyof typeof GetEmployeesId200DocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEmployeesId200DocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

/**
 * @nullable
 */
export type GetEmployeesId200Gender = typeof GetEmployeesId200Gender[keyof typeof GetEmployeesId200Gender] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEmployeesId200Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type GetEmployeesId200AddressesItemPlatform = typeof GetEmployeesId200AddressesItemPlatform[keyof typeof GetEmployeesId200AddressesItemPlatform];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEmployeesId200AddressesItemPlatform = {
  SHOPEE: 'SHOPEE',
  MERCADO_LIVRE: 'MERCADO_LIVRE',
  TRAY: 'TRAY',
  LOCAL: 'LOCAL',
} as const;

export type GetEmployeesId200AddressesItem = {
  number: string;
  id: string;
  created_at: string;
  updated_at: string;
  recipient_name: string;
  recipient_phone: string;
  cep: string;
  street: string;
  /** @nullable */
  complement: string | null;
  neighborhood: string;
  city: string;
  state: string;
  platform: GetEmployeesId200AddressesItemPlatform;
};

/**
 * Colaborador obtido com sucesso.
 */
export type GetEmployeesId200 = {
  id: string;
  name: string;
  phone: string;
  /** @nullable */
  phone_2: string | null;
  document_type: GetEmployeesId200DocumentType;
  document: string;
  /** @nullable */
  document_2: string | null;
  /** @nullable */
  email: string | null;
  /** @nullable */
  state_registration: string | null;
  tax_free: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
  entry_number: number;
  /** @nullable */
  gender: GetEmployeesId200Gender;
  /** @nullable */
  birth_date: string | null;
  person_id: string;
  addresses: GetEmployeesId200AddressesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetEmployeesId401 = {
  message: string;
};

/**
 * Colaborador n√£o encontrado.
 */
export type GetEmployeesId404 = {
  message: string;
};

export type PutEmployeesIdBodyDocumentType = typeof PutEmployeesIdBodyDocumentType[keyof typeof PutEmployeesIdBodyDocumentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutEmployeesIdBodyDocumentType = {
  PERSON: 'PERSON',
  COMPANY: 'COMPANY',
} as const;

export type PutEmployeesIdBodyGender = typeof PutEmployeesIdBodyGender[keyof typeof PutEmployeesIdBodyGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutEmployeesIdBodyGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type PutEmployeesIdBody = {
  /** @minLength 1 */
  name: string;
  /** @minLength 1 */
  phone: string;
  phone_2?: string;
  document_type: PutEmployeesIdBodyDocumentType;
  /** @minLength 1 */
  document: string;
  document_2?: string;
  /** @minLength 1 */
  email: string;
  state_registration?: string;
  tax_free?: boolean;
  gender?: PutEmployeesIdBodyGender;
  birth_date?: string;
  /**
   * @minLength 1
   * @pattern ^[cC][^\s-]{8,}$
   */
  address_id: string;
  /** @minLength 1 */
  recipient_name: string;
  /** @minLength 1 */
  recipient_phone: string;
  /** @minLength 1 */
  cep: string;
  /** @minLength 1 */
  street: string;
  /** @minLength 1 */
  number: string;
  complement?: string;
  /** @minLength 1 */
  neighborhood: string;
  /** @minLength 1 */
  city: string;
  /** @minLength 1 */
  state: string;
};

/**
 * Colaborador atualizado com sucesso.
 * @nullable
 */
export type PutEmployeesId200 = typeof PutEmployeesId200[keyof typeof PutEmployeesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutEmployeesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutEmployeesId401 = {
  message: string;
};

/**
 * Colaborador n√£o encontrado.
 */
export type PutEmployeesId404 = {
  message: string;
};

/**
 * Colaborador deletado com sucesso.
 * @nullable
 */
export type DeleteEmployeesId200 = typeof DeleteEmployeesId200[keyof typeof DeleteEmployeesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteEmployeesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteEmployeesId401 = {
  message: string;
};

/**
 * Colaborador n√£o encontrado.
 */
export type DeleteEmployeesId404 = {
  message: string;
};

export type PostProductsBodyProductCategoryIdsItem = {
  id: string;
};

export type PostProductsBody = {
  supplier_id?: string;
  product_measurement_unit_id?: string;
  product_brand_id: string;
  product_category_ids?: PostProductsBodyProductCategoryIdsItem[];
  /** @minLength 1 */
  reference_code: string;
  /** @minLength 1 */
  name: string;
  model?: string;
  description?: string;
  ncm?: number;
  cfop?: number;
  cest?: string;
  merchandise_origin?: string;
};

/**
 * Produto cadastrado com sucesso.
 * @nullable
 */
export type PostProducts201 = typeof PostProducts201[keyof typeof PostProducts201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProducts201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProducts401 = {
  message: string;
};

/**
 * Fornecedor, marca, categoria ou unidade comercial n√£o encontrado.
 */
export type PostProducts404 = {
  message: string;
};

export type GetProductsParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetProductsOrderBy;
productName?: string;
};

export type GetProductsOrderBy = typeof GetProductsOrderBy[keyof typeof GetProductsOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetProducts200ProductsItem = {
  id: string;
  name: string;
  /** @nullable */
  ncm: number | null;
};

/**
 * Produtos obtidos com sucesso.
 */
export type GetProducts200 = {
  totalCount: number;
  pageCount: number;
  products: GetProducts200ProductsItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProducts401 = {
  message: string;
};

/**
 * @nullable
 */
export type GetProductsId200ProductMeasurementUnit = {
  id: string;
  name: string;
  acronym: string;
} | null;

/**
 * @nullable
 */
export type GetProductsId200ProductBrand = {
  id: string;
  name: string;
  reference_code: string;
  created_at: string;
} | null;

export type GetProductsId200ProductCategoriesItem = {
  id: string;
  name: string;
  created_at: string;
};

/**
 * Produto obtido com sucesso.
 */
export type GetProductsId200 = {
  id: string;
  /** @minLength 1 */
  reference_code: string;
  /** @minLength 1 */
  product_sku: string;
  /** @minLength 1 */
  name: string;
  /** @nullable */
  model: string | null;
  /** @nullable */
  description: string | null;
  /** @nullable */
  ncm: number | null;
  /** @nullable */
  cfop: number | null;
  /** @nullable */
  cest: string | null;
  /** @nullable */
  merchandise_origin: string | null;
  created_at: string;
  updated_at: string;
  /** @nullable */
  product_measurement_unit: GetProductsId200ProductMeasurementUnit;
  /** @nullable */
  product_brand: GetProductsId200ProductBrand;
  product_categories: GetProductsId200ProductCategoriesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsId401 = {
  message: string;
};

/**
 * Produto n√£o encontrado.
 */
export type GetProductsId404 = {
  message: string;
};

export type PutProductsIdBodyProductCategoryIdsItem = {
  id: string;
};

export type PutProductsIdBody = {
  supplier_id?: string;
  product_measurement_unit_id?: string;
  product_brand_id?: string;
  product_category_ids?: PutProductsIdBodyProductCategoryIdsItem[];
  /** @minLength 1 */
  reference_code: string;
  /** @minLength 1 */
  name: string;
  model?: string;
  description?: string;
  ncm?: number;
  cfop?: number;
  cest?: string;
  merchandise_origin?: string;
};

/**
 * Produto atualizado com sucesso.
 * @nullable
 */
export type PutProductsId200 = typeof PutProductsId200[keyof typeof PutProductsId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutProductsId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutProductsId401 = {
  message: string;
};

/**
 * Produto, marca ou fornecedor n√£o encontrado.
 */
export type PutProductsId404 = {
  message: string;
};

/**
 * Produto deletado com sucesso.
 * @nullable
 */
export type DeleteProductsId200 = typeof DeleteProductsId200[keyof typeof DeleteProductsId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsId401 = {
  message: string;
};

/**
 * Produto n√£o encontrado.
 */
export type DeleteProductsId404 = {
  message: string;
};

export type PostProductsUploadBody = {
  /** Arquivo de imagem a ser enviado (JPG, PNG ou WEBP) */
  file?: unknown;
};

/**
 * Produto cadastrado com sucesso.
 */
export type PostProductsUpload201 = {
  fileUrl: string;
};

/**
 * Imagem inv√°lida.
 */
export type PostProductsUpload400 = {
  message: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsUpload401 = {
  message: string;
};

export type GetProductsMeasurementUnits200Item = {
  id: string;
  name: string;
  acronym: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsMeasurementUnits401 = {
  message: string;
};

export type PostProductsBrandsBody = {
  name: string;
  reference_code: string;
};

/**
 * Marca cadastrado com sucesso.
 * @nullable
 */
export type PostProductsBrands201 = typeof PostProductsBrands201[keyof typeof PostProductsBrands201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsBrands201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsBrands401 = {
  message: string;
};

/**
 * Marca j√° cadastrado.
 */
export type PostProductsBrands409 = {
  message: string;
};

export type GetProductsBrands200Item = {
  id: string;
  name: string;
  reference_code: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsBrands401 = {
  message: string;
};

/**
 * Marca deletada com sucesso.
 * @nullable
 */
export type DeleteProductsBrandsId200 = typeof DeleteProductsBrandsId200[keyof typeof DeleteProductsBrandsId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsBrandsId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsBrandsId401 = {
  message: string;
};

/**
 * Marca n√£o encontrado.
 */
export type DeleteProductsBrandsId404 = {
  message: string;
};

export type PostProductsCategoriesBody = {
  name: string;
};

/**
 * Categoria cadastrado com sucesso.
 * @nullable
 */
export type PostProductsCategories201 = typeof PostProductsCategories201[keyof typeof PostProductsCategories201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsCategories201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsCategories401 = {
  message: string;
};

/**
 * Categoria j√° cadastrado.
 */
export type PostProductsCategories409 = {
  message: string;
};

export type GetProductsCategories200Item = {
  id: string;
  name: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsCategories401 = {
  message: string;
};

/**
 * Categoria deletada com sucesso.
 * @nullable
 */
export type DeleteProductsCategoriesId200 = typeof DeleteProductsCategoriesId200[keyof typeof DeleteProductsCategoriesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsCategoriesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsCategoriesId401 = {
  message: string;
};

/**
 * Categoria n√£o encontrado.
 */
export type DeleteProductsCategoriesId404 = {
  message: string;
};

export type PostProductsAttributesNamesBody = {
  name: string;
};

/**
 * Nome do atributo do produto cadastrado com sucesso.
 * @nullable
 */
export type PostProductsAttributesNames201 = typeof PostProductsAttributesNames201[keyof typeof PostProductsAttributesNames201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsAttributesNames201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsAttributesNames401 = {
  message: string;
};

/**
 * Nome do atributo do produto j√° cadastrado.
 */
export type PostProductsAttributesNames409 = {
  message: string;
};

export type GetProductsAttributesNamesParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetProductsAttributesNamesOrderBy;
attributeName?: string;
};

export type GetProductsAttributesNamesOrderBy = typeof GetProductsAttributesNamesOrderBy[keyof typeof GetProductsAttributesNamesOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsAttributesNamesOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetProductsAttributesNames200ProductAttributeNamesItem = {
  id: string;
  name: string;
};

/**
 * Nomes dos atributos dos produtos obtidos com sucesso.
 */
export type GetProductsAttributesNames200 = {
  totalCount: number;
  pageCount: number;
  productAttributeNames: GetProductsAttributesNames200ProductAttributeNamesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsAttributesNames401 = {
  message: string;
};

export type PostProductsAttributesValuesBody = {
  product_attribute_name_id: string;
  value: string;
};

/**
 * Valor do atributo do produto cadastrado com sucesso.
 * @nullable
 */
export type PostProductsAttributesValues201 = typeof PostProductsAttributesValues201[keyof typeof PostProductsAttributesValues201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsAttributesValues201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsAttributesValues401 = {
  message: string;
};

/**
 * Valor do atributo do produto j√° cadastrado.
 */
export type PostProductsAttributesValues409 = {
  message: string;
};

export type GetProductsAttributesValuesParams = {
productAttributeNameId: string;
perPage?: number;
pageIndex?: number;
orderBy?: GetProductsAttributesValuesOrderBy;
attributeValue?: string;
};

export type GetProductsAttributesValuesOrderBy = typeof GetProductsAttributesValuesOrderBy[keyof typeof GetProductsAttributesValuesOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsAttributesValuesOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetProductsAttributesValues200ProductAttributeValuesItem = {
  id: string;
  value: string;
};

/**
 * Valores dos atributos dos produtos obtidos com sucesso.
 */
export type GetProductsAttributesValues200 = {
  totalCount: number;
  pageCount: number;
  productAttributeValues: GetProductsAttributesValues200ProductAttributeValuesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsAttributesValues401 = {
  message: string;
};

/**
 * Nome de atributo do produto obtido com sucesso.
 */
export type GetProductsAttributesNamesId200 = {
  id: string;
  name: string;
  created_at: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsAttributesNamesId401 = {
  message: string;
};

/**
 * Nome de atributo do produto n√£o encontrado.
 */
export type GetProductsAttributesNamesId404 = {
  message: string;
};

export type PutProductsAttributesNamesIdBody = {
  name: string;
};

/**
 * Nome de atributo do produto atualizado com sucesso.
 * @nullable
 */
export type PutProductsAttributesNamesId200 = typeof PutProductsAttributesNamesId200[keyof typeof PutProductsAttributesNamesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutProductsAttributesNamesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutProductsAttributesNamesId401 = {
  message: string;
};

/**
 * Nome de atributo do produto n√£o encontrado.
 */
export type PutProductsAttributesNamesId404 = {
  message: string;
};

/**
 * Nome de atributo do produto deletado com sucesso.
 * @nullable
 */
export type DeleteProductsAttributesNamesId200 = typeof DeleteProductsAttributesNamesId200[keyof typeof DeleteProductsAttributesNamesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsAttributesNamesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsAttributesNamesId401 = {
  message: string;
};

/**
 * Nome de atributo do produto n√£o encontrado.
 */
export type DeleteProductsAttributesNamesId404 = {
  message: string;
};

/**
 * Valor de atributo do produto obtido com sucesso.
 */
export type GetProductsAttributesValuesId200 = {
  id: string;
  value: string;
  created_at: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsAttributesValuesId401 = {
  message: string;
};

/**
 * Valor de atributo do produto n√£o encontrado.
 */
export type GetProductsAttributesValuesId404 = {
  message: string;
};

export type PutProductsAttributesValuesIdBody = {
  value: string;
};

/**
 * Valor de atributo do produto atualizado com sucesso.
 * @nullable
 */
export type PutProductsAttributesValuesId200 = typeof PutProductsAttributesValuesId200[keyof typeof PutProductsAttributesValuesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutProductsAttributesValuesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutProductsAttributesValuesId401 = {
  message: string;
};

/**
 * Valor de atributo do produto n√£o encontrado.
 */
export type PutProductsAttributesValuesId404 = {
  message: string;
};

/**
 * Valor de atributo do produto deletado com sucesso.
 * @nullable
 */
export type DeleteProductsAttributesValuesId200 = typeof DeleteProductsAttributesValuesId200[keyof typeof DeleteProductsAttributesValuesId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsAttributesValuesId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsAttributesValuesId401 = {
  message: string;
};

/**
 * Valor de atributo do produto n√£o encontrado.
 */
export type DeleteProductsAttributesValuesId404 = {
  message: string;
};

export type PostProductsVariationsBody = {
  /** @pattern ^[cC][^\s-]{8,}$ */
  product_id: string;
  barcode?: string;
  /** @minLength 1 */
  name: string;
  length_in_centimeters?: number;
  height_in_centimeters?: number;
  width_in_centimeters?: number;
  weight_in_grams?: number;
  average_cost: number;
  cost_price: number;
  selling_price: number;
  suggested_maximum_discount?: number;
  promotion_starts_at?: string;
  promotion_ends_at?: string;
  product_storage_location?: string;
  product_condition: string;
  product_expiration_date?: string;
  warranty_date?: string;
  current_stock: number;
  minimum_stock_level: number;
  products_in_review: number;
  update_stock?: boolean;
  track_inventory?: boolean;
  is_available?: boolean;
};

/**
 * Varia√ß√£o cadastrada com sucesso.
 * @nullable
 */
export type PostProductsVariations201 = typeof PostProductsVariations201[keyof typeof PostProductsVariations201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsVariations201 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostProductsVariations401 = {
  message: string;
};

/**
 * Varia√ß√£o j√° cadastrada.
 */
export type PostProductsVariations409 = {
  message: string;
};

export type GetProductsVariationsParams = {
perPage?: number;
pageIndex?: number;
orderBy?: GetProductsVariationsOrderBy;
productId?: string;
productVariationName?: string;
};

export type GetProductsVariationsOrderBy = typeof GetProductsVariationsOrderBy[keyof typeof GetProductsVariationsOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsVariationsOrderBy = {
  desc: 'desc',
  asc: 'asc',
} as const;

export type GetProductsVariations200ProductVariationsItem = {
  id: string;
  /** @nullable */
  barcode: string | null;
  /** @minLength 1 */
  name: string;
  average_cost: number;
  cost_price: number;
  selling_price: number;
  /** @nullable */
  product_storage_location: string | null;
  current_stock: number;
  minimum_stock_level: number;
  products_in_review: number;
  track_inventory?: boolean;
  is_available?: boolean;
  created_at: string;
  product_id: string;
};

/**
 * Varia√ß√µes de produtos obtidos com sucesso.
 */
export type GetProductsVariations200 = {
  totalCount: number;
  pageCount: number;
  productVariations: GetProductsVariations200ProductVariationsItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsVariations401 = {
  message: string;
};

/**
 * Varia√ß√µes de produtos n√£o encontrado.
 */
export type GetProductsVariations404 = {
  message: string;
};

export type GetProductsVariationsId200ProductAttributeNamesItemProductAttributeValuesItem = {
  id: string;
  value: string;
};

export type GetProductsVariationsId200ProductAttributeNamesItem = {
  id: string;
  name: string;
  product_attribute_values: GetProductsVariationsId200ProductAttributeNamesItemProductAttributeValuesItem[];
};

/**
 * Varia√ß√£o de produto obtido com sucesso.
 */
export type GetProductsVariationsId200 = {
  product_id: string;
  id: string;
  /** @nullable */
  barcode: string | null;
  /** @minLength 1 */
  name: string;
  average_cost: number;
  cost_price: number;
  selling_price: number;
  /** @nullable */
  product_storage_location: string | null;
  current_stock: number;
  minimum_stock_level: number;
  products_in_review: number;
  track_inventory?: boolean;
  is_available?: boolean;
  product_attribute_names: GetProductsVariationsId200ProductAttributeNamesItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetProductsVariationsId401 = {
  message: string;
};

/**
 * Varia√ß√£o de produto n√£o encontrado.
 */
export type GetProductsVariationsId404 = {
  message: string;
};

export type PutProductsVariationsIdBody = {
  /** @pattern ^[cC][^\s-]{8,}$ */
  product_id: string;
  barcode?: string;
  /** @minLength 1 */
  name: string;
  length_in_centimeters?: number;
  height_in_centimeters?: number;
  width_in_centimeters?: number;
  weight_in_grams?: number;
  average_cost: number;
  cost_price: number;
  selling_price: number;
  suggested_maximum_discount?: number;
  promotion_starts_at?: string;
  promotion_ends_at?: string;
  product_storage_location?: string;
  product_condition: string;
  product_expiration_date?: string;
  warranty_date?: string;
  current_stock: number;
  minimum_stock_level: number;
  products_in_review: number;
  update_stock?: boolean;
  track_inventory?: boolean;
  is_available?: boolean;
};

/**
 * Varia√ß√£o atualizada com sucesso.
 * @nullable
 */
export type PutProductsVariationsId200 = typeof PutProductsVariationsId200[keyof typeof PutProductsVariationsId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutProductsVariationsId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutProductsVariationsId401 = {
  message: string;
};

/**
 * Varia√ß√£o n√£o encontrada.
 */
export type PutProductsVariationsId404 = {
  message: string;
};

/**
 * Varia√ß√£o de produto deletado com sucesso.
 * @nullable
 */
export type DeleteProductsVariationsId200 = typeof DeleteProductsVariationsId200[keyof typeof DeleteProductsVariationsId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProductsVariationsId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteProductsVariationsId401 = {
  message: string;
};

/**
 * Varia√ß√£o de produto n√£o encontrado.
 */
export type DeleteProductsVariationsId404 = {
  message: string;
};

export type PostOrdersBodyStatus = typeof PostOrdersBodyStatus[keyof typeof PostOrdersBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOrdersBodyStatus = {
  PROCESSED: 'PROCESSED',
  CANCELLED: 'CANCELLED',
} as const;

export type PostOrdersBodyShippingCarrier = typeof PostOrdersBodyShippingCarrier[keyof typeof PostOrdersBodyShippingCarrier];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOrdersBodyShippingCarrier = {
  CORREIOS: 'CORREIOS',
  JADLOG: 'JADLOG',
} as const;

export type PostOrdersBodyPaymentMethod = typeof PostOrdersBodyPaymentMethod[keyof typeof PostOrdersBodyPaymentMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOrdersBodyPaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  PIX: 'PIX',
} as const;

export type PostOrdersBodyItemsItem = {
  /** @minLength 1 */
  product_variation_id: string;
  /** @minimum 1 */
  quantity: number;
  /** @minimum 0 */
  discount: number;
};

export type PostOrdersBody = {
  /** @minLength 1 */
  customer_id: string;
  /** @minLength 1 */
  address_id: string;
  status?: PostOrdersBodyStatus;
  shipping_carrier?: PostOrdersBodyShippingCarrier;
  payment_method: PostOrdersBodyPaymentMethod;
  /** @minimum 0 */
  shipping_cost?: number;
  /** @minItems 1 */
  items: PostOrdersBodyItemsItem[];
};

/**
 * Pedido criado com sucesso.
 * @nullable
 */
export type PostOrders201 = typeof PostOrders201[keyof typeof PostOrders201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostOrders201 = {
  null: 'null',
} as const;

/**
 * Dados inv√°lidos.
 */
export type PostOrders400 = {
  message: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostOrders401 = {
  message: string;
};

/**
 * Cliente ou Endere√ßo n√£o encontrado.
 */
export type PostOrders404 = {
  message: string;
};

export type GetOrdersParams = {
perPage?: string;
pageIndex?: string;
orderBy?: GetOrdersOrderBy;
status?: GetOrdersStatus;
orderId?: string;
platformOrderId?: string;
timeFrom?: string;
timeTo?: string;
};

export type GetOrdersOrderBy = typeof GetOrdersOrderBy[keyof typeof GetOrdersOrderBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrdersOrderBy = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type GetOrdersStatus = typeof GetOrdersStatus[keyof typeof GetOrdersStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrdersStatus = {
  PROCESSED: 'PROCESSED',
  CANCELLED: 'CANCELLED',
} as const;

export type GetOrders200OrdersItem = {
  id: string;
  status: string;
  shipping_carrier: string;
  order_placed_at: string;
  created_at: string;
  updated_at: string;
};

export type GetOrders200 = {
  totalCount: number;
  pageCount: number;
  orders: GetOrders200OrdersItem[];
};

export type GetOrdersId200ItemsItem = {
  id: string;
  variation_sku: string;
  name: string;
  quantity: number;
  unit_price: number;
  unit_price_with_discount: number;
  created_at: string;
  updated_at: string;
  order_id: string;
  /** @nullable */
  product_variation_id: string | null;
};

/**
 * Detalhes do pedido obtidos com sucesso.
 */
export type GetOrdersId200 = {
  id: string;
  status: string;
  shipping_carrier: string;
  order_placed_at: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  customer_id: string;
  address_id: string;
  items: GetOrdersId200ItemsItem[];
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetOrdersId401 = {
  message: string;
};

/**
 * Pedido n√£o encontrado.
 */
export type GetOrdersId404 = {
  message: string;
};

export type PutOrdersIdBodyStatus = typeof PutOrdersIdBodyStatus[keyof typeof PutOrdersIdBodyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutOrdersIdBodyStatus = {
  PROCESSED: 'PROCESSED',
  CANCELLED: 'CANCELLED',
} as const;

export type PutOrdersIdBodyShippingCarrier = typeof PutOrdersIdBodyShippingCarrier[keyof typeof PutOrdersIdBodyShippingCarrier];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutOrdersIdBodyShippingCarrier = {
  CORREIOS: 'CORREIOS',
  JADLOG: 'JADLOG',
} as const;

export type PutOrdersIdBodyPaymentMethod = typeof PutOrdersIdBodyPaymentMethod[keyof typeof PutOrdersIdBodyPaymentMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutOrdersIdBodyPaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  PIX: 'PIX',
} as const;

export type PutOrdersIdBodyItemsItem = {
  /** @minLength 1 */
  product_variation_id: string;
  /** @minimum 1 */
  quantity: number;
  /** @minimum 0 */
  discount: number;
};

export type PutOrdersIdBody = {
  /** @minLength 1 */
  customer_id: string;
  /** @minLength 1 */
  address_id: string;
  status?: PutOrdersIdBodyStatus;
  shipping_carrier?: PutOrdersIdBodyShippingCarrier;
  payment_method: PutOrdersIdBodyPaymentMethod;
  /** @minimum 0 */
  shipping_cost?: number;
  /** @minItems 1 */
  items: PutOrdersIdBodyItemsItem[];
  /** Retornar itens do pedido anterior ao estoque */
  return_previous_items_to_stock?: boolean;
  /** Remover itens do novo pedido do estoque */
  remove_current_items_from_stock?: boolean;
};

/**
 * Pedido atualizado com sucesso.
 * @nullable
 */
export type PutOrdersId200 = typeof PutOrdersId200[keyof typeof PutOrdersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutOrdersId200 = {
  null: 'null',
} as const;

/**
 * Dados inv√°lidos.
 */
export type PutOrdersId400 = {
  message: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type PutOrdersId401 = {
  message: string;
};

/**
 * Pedido n√£o encontrado.
 */
export type PutOrdersId404 = {
  message: string;
};

/**
 * Pedido deletado com sucesso.
 * @nullable
 */
export type DeleteOrdersId200 = typeof DeleteOrdersId200[keyof typeof DeleteOrdersId200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteOrdersId200 = {
  null: 'null',
} as const;

/**
 * Usu√°rio n√£o autenticado.
 */
export type DeleteOrdersId401 = {
  message: string;
};

/**
 * Pedido n√£o encontrado.
 */
export type DeleteOrdersId404 = {
  message: string;
};

export type GetShopeeAuthUrl200 = {
  url: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type GetShopeeAuthUrl401 = {
  message: string;
};

export type PostShopeeAuthTokenBody = {
  code: string;
  shopId: number;
};

/**
 * Shopee authenticated.
 * @nullable
 */
export type PostShopeeAuthToken200 = typeof PostShopeeAuthToken200[keyof typeof PostShopeeAuthToken200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostShopeeAuthToken200 = {
  null: 'null',
} as const;

/**
 * Shopee already exists.
 */
export type PostShopeeAuthToken400 = {
  message: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostShopeeAuthToken401 = {
  message: string;
};

/**
 * Connection not found.
 */
export type PostShopeeAuthToken404 = {
  message: string;
};

export type PostShopeeOrderImportParams = {
orderPeriodStartDate: string;
orderPeriodEndDate: string;
};

/**
 * Pedidos importados com sucesso.
 * @nullable
 */
export type PostShopeeOrderImport200 = typeof PostShopeeOrderImport200[keyof typeof PostShopeeOrderImport200] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostShopeeOrderImport200 = {
  null: 'null',
} as const;

/**
 * Erro ao importar pedidos.
 */
export type PostShopeeOrderImport400 = {
  message: string;
};

/**
 * Usu√°rio n√£o autenticado.
 */
export type PostShopeeOrderImport401 = {
  message: string;
};

/**
 * Connection not found.
 */
export type PostShopeeOrderImport404 = {
  message: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Esta rota n√£o retorna nenhum dado caso o usur√°rio seja criado com sucesso. O email e a senha informados s√£o utilizados para autenticar o usu√°rio em futuras requisi√ß√µes. O nome e o email s√£o obrigat√≥rios, e a senha deve ter no m√≠nimo 6 caracteres.
 * @summary Registra um novo usu√°rio.
 */
export const getPostUsersUrl = () => {


  

  return `http://localhost:3333/users`
}

export const postUsers = async (postUsersBody: PostUsersBody, options?: RequestInit): Promise<PostUsers201> => {
  
  return http<PostUsers201>(getPostUsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postUsersBody,)
  }
);}




export const getPostUsersMutationOptions = <TError = PostUsers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext> => {
    
const mutationKey = ['postUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: PostUsersBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = PostUsersBody
    export type PostUsersMutationError = PostUsers409

    /**
 * @summary Registra um novo usu√°rio.
 */
export const usePostUsers = <TError = PostUsers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postUsers>>,
        TError,
        {data: PostUsersBody},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Utilize esta fun√ß√£o para autenticar um usu√°rio. Esta rota retorna um token JWT que deve ser enviado no header da requisi√ß√£o como Bearer Token. O token √© v√°lido por 7 dias e pode ser utilizado para autenticar o usu√°rio em futuras requisi√ß√µes. Caso o email ou a senha estejam incorretos, a rota retorna um erro 401 com a descri√ß√£o "Invalid email or password".
 * @summary Autentica um usu√°rio.
 */
export const getPostSessionsPasswordUrl = () => {


  

  return `http://localhost:3333/sessions/password`
}

export const postSessionsPassword = async (postSessionsPasswordBody: PostSessionsPasswordBody, options?: RequestInit): Promise<PostSessionsPassword200> => {
  
  return http<PostSessionsPassword200>(getPostSessionsPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSessionsPasswordBody,)
  }
);}




export const getPostSessionsPasswordMutationOptions = <TError = PostSessionsPassword400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSessionsPassword>>, TError,{data: PostSessionsPasswordBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postSessionsPassword>>, TError,{data: PostSessionsPasswordBody}, TContext> => {
    
const mutationKey = ['postSessionsPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSessionsPassword>>, {data: PostSessionsPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postSessionsPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSessionsPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postSessionsPassword>>>
    export type PostSessionsPasswordMutationBody = PostSessionsPasswordBody
    export type PostSessionsPasswordMutationError = PostSessionsPassword400

    /**
 * @summary Autentica um usu√°rio.
 */
export const usePostSessionsPassword = <TError = PostSessionsPassword400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSessionsPassword>>, TError,{data: PostSessionsPasswordBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postSessionsPassword>>,
        TError,
        {data: PostSessionsPasswordBody},
        TContext
      > => {

      const mutationOptions = getPostSessionsPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Utilize esta fun√ß√£o para recuperar dados de perfil do usu√°rio autenticado. Esta rota retorna todas as informa√ß√µes de perfil do usu√°rio, incluindo nome, email e outros dados cadastrais.
 * @summary Retorna dados de perfil do usu√°rio.
 */
export const getGetUsersProfileUrl = () => {


  

  return `http://localhost:3333/users/profile`
}

export const getUsersProfile = async ( options?: RequestInit): Promise<GetUsersProfile200> => {
  
  return http<GetUsersProfile200>(getGetUsersProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetUsersProfileQueryKey = () => {
    return [`http://localhost:3333/users/profile`] as const;
    }

    
export const getGetUsersProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile404>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersProfile>>> = ({ signal }) => getUsersProfile({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = GetUsersProfile401 | GetUsersProfile404


export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile404>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersProfile>>,
          TError,
          Awaited<ReturnType<typeof getUsersProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile404>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersProfile>>,
          TError,
          Awaited<ReturnType<typeof getUsersProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile404>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna dados de perfil do usu√°rio.
 */

export function useGetUsersProfile<TData = Awaited<ReturnType<typeof getUsersProfile>>, TError = GetUsersProfile401 | GetUsersProfile404>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersProfile>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite cadastrar um novo cliente no sistema. √â necess√°rio fornecer os dados do cliente no corpo da requisi√ß√£o, incluindo nome, documento (CPF/CNPJ), endere√ßo e informa√ß√µes de contato. Os dados ser√£o validados antes do cadastro. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Cadastra um novo cliente.
 */
export const getPostCustomersUrl = () => {


  

  return `http://localhost:3333/customers`
}

export const postCustomers = async (postCustomersBody: PostCustomersBody, options?: RequestInit): Promise<PostCustomers201> => {
  
  return http<PostCustomers201>(getPostCustomersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postCustomersBody,)
  }
);}




export const getPostCustomersMutationOptions = <TError = PostCustomers401 | PostCustomers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCustomers>>, TError,{data: PostCustomersBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postCustomers>>, TError,{data: PostCustomersBody}, TContext> => {
    
const mutationKey = ['postCustomers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCustomers>>, {data: PostCustomersBody}> = (props) => {
          const {data} = props ?? {};

          return  postCustomers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCustomersMutationResult = NonNullable<Awaited<ReturnType<typeof postCustomers>>>
    export type PostCustomersMutationBody = PostCustomersBody
    export type PostCustomersMutationError = PostCustomers401 | PostCustomers409

    /**
 * @summary Cadastra um novo cliente.
 */
export const usePostCustomers = <TError = PostCustomers401 | PostCustomers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCustomers>>, TError,{data: PostCustomersBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCustomers>>,
        TError,
        {data: PostCustomersBody},
        TContext
      > => {

      const mutationOptions = getPostCustomersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota retorna uma lista paginada de todos os clientes cadastrados no sistema. √â poss√≠vel filtrar os resultados por nome, documento (CPF/CNPJ) e status do cliente. A resposta inclui informa√ß√µes b√°sicas de cada cliente, como ID, nome, documento e data de cadastro. Os resultados podem ser ordenados por diferentes campos e a quantidade de itens por p√°gina pode ser personalizada. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Retorna uma lista de clientes castrados.
 */
export const getGetCustomersUrl = (params?: GetCustomersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/customers?${stringifiedParams}` : `http://localhost:3333/customers`
}

export const getCustomers = async (params?: GetCustomersParams, options?: RequestInit): Promise<GetCustomers200> => {
  
  return http<GetCustomers200>(getGetCustomersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetCustomersQueryKey = (params?: GetCustomersParams,) => {
    return [`http://localhost:3333/customers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCustomersQueryOptions = <TData = Awaited<ReturnType<typeof getCustomers>>, TError = GetCustomers401 | GetCustomers404>(params?: GetCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomers>>> = ({ signal }) => getCustomers(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomers>>>
export type GetCustomersQueryError = GetCustomers401 | GetCustomers404


export function useGetCustomers<TData = Awaited<ReturnType<typeof getCustomers>>, TError = GetCustomers401 | GetCustomers404>(
 params: undefined |  GetCustomersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomers<TData = Awaited<ReturnType<typeof getCustomers>>, TError = GetCustomers401 | GetCustomers404>(
 params?: GetCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomers<TData = Awaited<ReturnType<typeof getCustomers>>, TError = GetCustomers401 | GetCustomers404>(
 params?: GetCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de clientes castrados.
 */

export function useGetCustomers<TData = Awaited<ReturnType<typeof getCustomers>>, TError = GetCustomers401 | GetCustomers404>(
 params?: GetCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota retorna informa√ß√µes detalhadas de um cliente espec√≠fico com base no ID fornecido. Os dados retornados incluem todas as informa√ß√µes do cliente, como nome completo, documento (CPF/CNPJ), endere√ßo completo, informa√ß√µes de contato, data de cadastro e √∫ltima atualiza√ß√£o. √â necess√°rio fornecer o ID do cliente como par√¢metro na URL. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Retorna informa√ß√µes de um cliente espec√≠fico.
 */
export const getGetCustomersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/customers/${id}`
}

export const getCustomersId = async (id: string, options?: RequestInit): Promise<GetCustomersId200> => {
  
  return http<GetCustomersId200>(getGetCustomersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetCustomersIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/customers/${id}`] as const;
    }

    
export const getGetCustomersIdQueryOptions = <TData = Awaited<ReturnType<typeof getCustomersId>>, TError = GetCustomersId401 | GetCustomersId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomersId>>> = ({ signal }) => getCustomersId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomersId>>>
export type GetCustomersIdQueryError = GetCustomersId401 | GetCustomersId404


export function useGetCustomersId<TData = Awaited<ReturnType<typeof getCustomersId>>, TError = GetCustomersId401 | GetCustomersId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomersId>>,
          TError,
          Awaited<ReturnType<typeof getCustomersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomersId<TData = Awaited<ReturnType<typeof getCustomersId>>, TError = GetCustomersId401 | GetCustomersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomersId>>,
          TError,
          Awaited<ReturnType<typeof getCustomersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomersId<TData = Awaited<ReturnType<typeof getCustomersId>>, TError = GetCustomersId401 | GetCustomersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna informa√ß√µes de um cliente espec√≠fico.
 */

export function useGetCustomersId<TData = Awaited<ReturnType<typeof getCustomersId>>, TError = GetCustomersId401 | GetCustomersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite atualizar as informa√ß√µes de um cliente espec√≠fico no sistema. √â necess√°rio fornecer o ID do cliente como par√¢metro na URL e os dados a serem atualizados no corpo da requisi√ß√£o. Os campos dispon√≠veis para atualiza√ß√£o incluem nome, documento (CPF/CNPJ), endere√ßo e informa√ß√µes de contato. Todos os dados fornecidos ser√£o validados antes da atualiza√ß√£o. As informa√ß√µes anteriores do cliente ser√£o substitu√≠das pelos novos dados fornecidos. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Altera as informa√ß√µes de um cliente espec√≠fico.
 */
export const getPutCustomersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/customers/${id}`
}

export const putCustomersId = async (id: string,
    putCustomersIdBody: PutCustomersIdBody, options?: RequestInit): Promise<PutCustomersId200> => {
  
  return http<PutCustomersId200>(getPutCustomersIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putCustomersIdBody,)
  }
);}




export const getPutCustomersIdMutationOptions = <TError = PutCustomersId401 | PutCustomersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCustomersId>>, TError,{id: string;data: PutCustomersIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putCustomersId>>, TError,{id: string;data: PutCustomersIdBody}, TContext> => {
    
const mutationKey = ['putCustomersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCustomersId>>, {id: string;data: PutCustomersIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putCustomersId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCustomersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCustomersId>>>
    export type PutCustomersIdMutationBody = PutCustomersIdBody
    export type PutCustomersIdMutationError = PutCustomersId401 | PutCustomersId404

    /**
 * @summary Altera as informa√ß√µes de um cliente espec√≠fico.
 */
export const usePutCustomersId = <TError = PutCustomersId401 | PutCustomersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCustomersId>>, TError,{id: string;data: PutCustomersIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putCustomersId>>,
        TError,
        {id: string;data: PutCustomersIdBody},
        TContext
      > => {

      const mutationOptions = getPutCustomersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite remover permanentemente um cliente espec√≠fico do sistema com base no ID fornecido. A remo√ß√£o √© irrevers√≠vel e todos os dados associados ao cliente ser√£o exclu√≠dos. √â necess√°rio fornecer o ID do cliente como par√¢metro na URL. Por quest√µes de seguran√ßa, requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Remove um cliente espec√≠fico.
 */
export const getDeleteCustomersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/customers/${id}`
}

export const deleteCustomersId = async (id: string, options?: RequestInit): Promise<DeleteCustomersId200> => {
  
  return http<DeleteCustomersId200>(getDeleteCustomersIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteCustomersIdMutationOptions = <TError = DeleteCustomersId401 | DeleteCustomersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCustomersId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteCustomersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCustomersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCustomersId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCustomersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCustomersId>>>
    
    export type DeleteCustomersIdMutationError = DeleteCustomersId401 | DeleteCustomersId404

    /**
 * @summary Remove um cliente espec√≠fico.
 */
export const useDeleteCustomersId = <TError = DeleteCustomersId401 | DeleteCustomersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCustomersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCustomersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite o cadastro de um novo fornecedor no sistema. Os dados do fornecedor devem ser enviados no corpo da requisi√ß√£o, incluindo informa√ß√µes essenciais como: nome completo ou raz√£o social, CPF ou CNPJ, inscri√ß√£o estadual (se aplic√°vel), endere√ßo completo (logradouro, n√∫mero, complemento, bairro, cidade, estado e CEP), informa√ß√µes de contato (telefone, celular, e-mail) e observa√ß√µes adicionais. O sistema validar√° os dados fornecidos e, em caso de sucesso, retornar√° os dados do fornecedor rec√©m-cadastrado com seu ID √∫nico. √â necess√°rio que o usu√°rio esteja autenticado com um token JWT v√°lido para acessar esta rota.
 * @summary Cadastrar um novo fornecedor.
 */
export const getPostSuppliersUrl = () => {


  

  return `http://localhost:3333/suppliers`
}

export const postSuppliers = async (postSuppliersBody: PostSuppliersBody, options?: RequestInit): Promise<PostSuppliers201> => {
  
  return http<PostSuppliers201>(getPostSuppliersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSuppliersBody,)
  }
);}




export const getPostSuppliersMutationOptions = <TError = PostSuppliers401 | PostSuppliers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSuppliers>>, TError,{data: PostSuppliersBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postSuppliers>>, TError,{data: PostSuppliersBody}, TContext> => {
    
const mutationKey = ['postSuppliers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSuppliers>>, {data: PostSuppliersBody}> = (props) => {
          const {data} = props ?? {};

          return  postSuppliers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSuppliersMutationResult = NonNullable<Awaited<ReturnType<typeof postSuppliers>>>
    export type PostSuppliersMutationBody = PostSuppliersBody
    export type PostSuppliersMutationError = PostSuppliers401 | PostSuppliers409

    /**
 * @summary Cadastrar um novo fornecedor.
 */
export const usePostSuppliers = <TError = PostSuppliers401 | PostSuppliers409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSuppliers>>, TError,{data: PostSuppliersBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postSuppliers>>,
        TError,
        {data: PostSuppliersBody},
        TContext
      > => {

      const mutationOptions = getPostSuppliersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite listar todos os fornecedores cadastrados no sistema. Os resultados podem ser filtrados atrav√©s de par√¢metros de consulta, como nome, CPF/CNPJ, cidade ou estado. A lista retornada √© paginada, permitindo a navega√ß√£o atrav√©s das p√°ginas de resultados, com op√ß√µes para definir o n√∫mero de itens por p√°gina. Os fornecedores s√£o apresentados em ordem alfab√©tica por padr√£o, incluindo suas informa√ß√µes b√°sicas como nome, documento, cidade e contatos. √â necess√°rio que o usu√°rio esteja autenticado com um token JWT v√°lido para acessar esta rota.
 * @summary Retorna uma lista de fornecedores cadastrados.
 */
export const getGetSuppliersUrl = (params?: GetSuppliersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/suppliers?${stringifiedParams}` : `http://localhost:3333/suppliers`
}

export const getSuppliers = async (params?: GetSuppliersParams, options?: RequestInit): Promise<GetSuppliers200> => {
  
  return http<GetSuppliers200>(getGetSuppliersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetSuppliersQueryKey = (params?: GetSuppliersParams,) => {
    return [`http://localhost:3333/suppliers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSuppliersQueryOptions = <TData = Awaited<ReturnType<typeof getSuppliers>>, TError = GetSuppliers401 | GetSuppliers404>(params?: GetSuppliersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuppliersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuppliers>>> = ({ signal }) => getSuppliers(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuppliersQueryResult = NonNullable<Awaited<ReturnType<typeof getSuppliers>>>
export type GetSuppliersQueryError = GetSuppliers401 | GetSuppliers404


export function useGetSuppliers<TData = Awaited<ReturnType<typeof getSuppliers>>, TError = GetSuppliers401 | GetSuppliers404>(
 params: undefined |  GetSuppliersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuppliers>>,
          TError,
          Awaited<ReturnType<typeof getSuppliers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuppliers<TData = Awaited<ReturnType<typeof getSuppliers>>, TError = GetSuppliers401 | GetSuppliers404>(
 params?: GetSuppliersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuppliers>>,
          TError,
          Awaited<ReturnType<typeof getSuppliers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuppliers<TData = Awaited<ReturnType<typeof getSuppliers>>, TError = GetSuppliers401 | GetSuppliers404>(
 params?: GetSuppliersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de fornecedores cadastrados.
 */

export function useGetSuppliers<TData = Awaited<ReturnType<typeof getSuppliers>>, TError = GetSuppliers401 | GetSuppliers404>(
 params?: GetSuppliersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliers>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuppliersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retorna as informa√ß√µes de um fornecedor espec√≠fico.
 */
export const getGetSuppliersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/suppliers/${id}`
}

export const getSuppliersId = async (id: string, options?: RequestInit): Promise<GetSuppliersId200> => {
  
  return http<GetSuppliersId200>(getGetSuppliersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetSuppliersIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/suppliers/${id}`] as const;
    }

    
export const getGetSuppliersIdQueryOptions = <TData = Awaited<ReturnType<typeof getSuppliersId>>, TError = GetSuppliersId401 | GetSuppliersId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSuppliersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSuppliersId>>> = ({ signal }) => getSuppliersId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSuppliersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSuppliersId>>>
export type GetSuppliersIdQueryError = GetSuppliersId401 | GetSuppliersId404


export function useGetSuppliersId<TData = Awaited<ReturnType<typeof getSuppliersId>>, TError = GetSuppliersId401 | GetSuppliersId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuppliersId>>,
          TError,
          Awaited<ReturnType<typeof getSuppliersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuppliersId<TData = Awaited<ReturnType<typeof getSuppliersId>>, TError = GetSuppliersId401 | GetSuppliersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSuppliersId>>,
          TError,
          Awaited<ReturnType<typeof getSuppliersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSuppliersId<TData = Awaited<ReturnType<typeof getSuppliersId>>, TError = GetSuppliersId401 | GetSuppliersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna as informa√ß√µes de um fornecedor espec√≠fico.
 */

export function useGetSuppliersId<TData = Awaited<ReturnType<typeof getSuppliersId>>, TError = GetSuppliersId401 | GetSuppliersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSuppliersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSuppliersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite a atualiza√ß√£o das informa√ß√µes de um fornecedor espec√≠fico no sistema. Os dados atualizados do fornecedor devem ser enviados no corpo da requisi√ß√£o, podendo incluir: nome completo ou raz√£o social, CPF ou CNPJ, inscri√ß√£o estadual, endere√ßo completo (logradouro, n√∫mero, complemento, bairro, cidade, estado e CEP), informa√ß√µes de contato (telefone, celular, e-mail) e observa√ß√µes. O ID do fornecedor deve ser fornecido como par√¢metro na URL. O sistema validar√° os dados fornecidos e, em caso de sucesso, retornar√° os dados atualizados do fornecedor. √â necess√°rio que o usu√°rio esteja autenticado com um token JWT v√°lido para acessar esta rota.
 * @summary Altera as informa√ß√µes de um fornecedor espec√≠fico.
 */
export const getPutSuppliersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/suppliers/${id}`
}

export const putSuppliersId = async (id: string,
    putSuppliersIdBody: PutSuppliersIdBody, options?: RequestInit): Promise<PutSuppliersId200> => {
  
  return http<PutSuppliersId200>(getPutSuppliersIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putSuppliersIdBody,)
  }
);}




export const getPutSuppliersIdMutationOptions = <TError = PutSuppliersId401 | PutSuppliersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSuppliersId>>, TError,{id: string;data: PutSuppliersIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putSuppliersId>>, TError,{id: string;data: PutSuppliersIdBody}, TContext> => {
    
const mutationKey = ['putSuppliersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSuppliersId>>, {id: string;data: PutSuppliersIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putSuppliersId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSuppliersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSuppliersId>>>
    export type PutSuppliersIdMutationBody = PutSuppliersIdBody
    export type PutSuppliersIdMutationError = PutSuppliersId401 | PutSuppliersId404

    /**
 * @summary Altera as informa√ß√µes de um fornecedor espec√≠fico.
 */
export const usePutSuppliersId = <TError = PutSuppliersId401 | PutSuppliersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSuppliersId>>, TError,{id: string;data: PutSuppliersIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putSuppliersId>>,
        TError,
        {id: string;data: PutSuppliersIdBody},
        TContext
      > => {

      const mutationOptions = getPutSuppliersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite a remo√ß√£o de um fornecedor espec√≠fico do sistema. O ID do fornecedor deve ser fornecido como par√¢metro na URL. Ao executar esta opera√ß√£o, todos os dados do fornecedor ser√£o permanentemente exclu√≠dos do sistema. √â importante notar que esta a√ß√£o n√£o pode ser desfeita. Antes de remover um fornecedor, certifique-se de que n√£o existem depend√™ncias ou registros vinculados a ele no sistema. √â necess√°rio que o usu√°rio esteja autenticado com um token JWT v√°lido para acessar esta rota.
 * @summary Remove um fornecedor espec√≠fico.
 */
export const getDeleteSuppliersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/suppliers/${id}`
}

export const deleteSuppliersId = async (id: string, options?: RequestInit): Promise<DeleteSuppliersId200> => {
  
  return http<DeleteSuppliersId200>(getDeleteSuppliersIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteSuppliersIdMutationOptions = <TError = DeleteSuppliersId401 | DeleteSuppliersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSuppliersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSuppliersId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteSuppliersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSuppliersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteSuppliersId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSuppliersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSuppliersId>>>
    
    export type DeleteSuppliersIdMutationError = DeleteSuppliersId401 | DeleteSuppliersId404

    /**
 * @summary Remove um fornecedor espec√≠fico.
 */
export const useDeleteSuppliersId = <TError = DeleteSuppliersId401 | DeleteSuppliersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSuppliersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteSuppliersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteSuppliersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Requer autentica√ß√£o via token JWT para garantir acesso seguro. Permite o registro completo de informa√ß√µes do colaborador, incluindo: nome completo, cargo, departamento, data de admiss√£o, documentos pessoais, informa√ß√µes de contato e dados banc√°rios. Todos os campos devem ser preenchidos conforme as especifica√ß√µes definidas no schema do corpo da requisi√ß√£o. Os dados s√£o validados antes do processamento para garantir a integridade e consist√™ncia das informa√ß√µes.
 * @summary Cadastra um novo colaborador.
 */
export const getPostEmployeesUrl = () => {


  

  return `http://localhost:3333/employees`
}

export const postEmployees = async (postEmployeesBody: PostEmployeesBody, options?: RequestInit): Promise<PostEmployees201> => {
  
  return http<PostEmployees201>(getPostEmployeesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postEmployeesBody,)
  }
);}




export const getPostEmployeesMutationOptions = <TError = PostEmployees401 | PostEmployees409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmployees>>, TError,{data: PostEmployeesBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postEmployees>>, TError,{data: PostEmployeesBody}, TContext> => {
    
const mutationKey = ['postEmployees'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEmployees>>, {data: PostEmployeesBody}> = (props) => {
          const {data} = props ?? {};

          return  postEmployees(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEmployeesMutationResult = NonNullable<Awaited<ReturnType<typeof postEmployees>>>
    export type PostEmployeesMutationBody = PostEmployeesBody
    export type PostEmployeesMutationError = PostEmployees401 | PostEmployees409

    /**
 * @summary Cadastra um novo colaborador.
 */
export const usePostEmployees = <TError = PostEmployees401 | PostEmployees409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEmployees>>, TError,{data: PostEmployeesBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEmployees>>,
        TError,
        {data: PostEmployeesBody},
        TContext
      > => {

      const mutationOptions = getPostEmployeesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Requer autentica√ß√£o via token JWT para garantir acesso seguro. Retorna uma lista paginada de colaboradores cadastrados no sistema, com op√ß√µes de filtro por nome, cargo e departamento. Os resultados podem ser ordenados por diferentes campos e a quantidade de itens por p√°gina pode ser personalizada. Inclui informa√ß√µes b√°sicas como nome, cargo, departamento e status do colaborador. Metadados de pagina√ß√£o s√£o inclu√≠dos na resposta para facilitar a navega√ß√£o.
 * @summary Retorna uma lista de colaboradores cadastrados.
 */
export const getGetEmployeesUrl = (params?: GetEmployeesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/employees?${stringifiedParams}` : `http://localhost:3333/employees`
}

export const getEmployees = async (params?: GetEmployeesParams, options?: RequestInit): Promise<GetEmployees200> => {
  
  return http<GetEmployees200>(getGetEmployeesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetEmployeesQueryKey = (params?: GetEmployeesParams,) => {
    return [`http://localhost:3333/employees`, ...(params ? [params]: [])] as const;
    }

    
export const getGetEmployeesQueryOptions = <TData = Awaited<ReturnType<typeof getEmployees>>, TError = GetEmployees401 | GetEmployees404>(params?: GetEmployeesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmployeesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmployees>>> = ({ signal }) => getEmployees(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEmployeesQueryResult = NonNullable<Awaited<ReturnType<typeof getEmployees>>>
export type GetEmployeesQueryError = GetEmployees401 | GetEmployees404


export function useGetEmployees<TData = Awaited<ReturnType<typeof getEmployees>>, TError = GetEmployees401 | GetEmployees404>(
 params: undefined |  GetEmployeesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmployees>>,
          TError,
          Awaited<ReturnType<typeof getEmployees>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEmployees<TData = Awaited<ReturnType<typeof getEmployees>>, TError = GetEmployees401 | GetEmployees404>(
 params?: GetEmployeesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmployees>>,
          TError,
          Awaited<ReturnType<typeof getEmployees>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEmployees<TData = Awaited<ReturnType<typeof getEmployees>>, TError = GetEmployees401 | GetEmployees404>(
 params?: GetEmployeesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de colaboradores cadastrados.
 */

export function useGetEmployees<TData = Awaited<ReturnType<typeof getEmployees>>, TError = GetEmployees401 | GetEmployees404>(
 params?: GetEmployeesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployees>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEmployeesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Requer autentica√ß√£o via token JWT para garantir acesso seguro. Retorna informa√ß√µes detalhadas de um colaborador espec√≠fico, incluindo dados pessoais, profissionais, documentos, informa√ß√µes de contato e dados banc√°rios. O ID do colaborador deve ser fornecido como par√¢metro na URL. A rota valida a exist√™ncia do colaborador antes de retornar os dados e garante que apenas usu√°rios autorizados tenham acesso √†s informa√ß√µes.
 * @summary Retorna informa√ß√µes um colaborador espec√≠fico.
 */
export const getGetEmployeesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/employees/${id}`
}

export const getEmployeesId = async (id: string, options?: RequestInit): Promise<GetEmployeesId200> => {
  
  return http<GetEmployeesId200>(getGetEmployeesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetEmployeesIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/employees/${id}`] as const;
    }

    
export const getGetEmployeesIdQueryOptions = <TData = Awaited<ReturnType<typeof getEmployeesId>>, TError = GetEmployeesId401 | GetEmployeesId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEmployeesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEmployeesId>>> = ({ signal }) => getEmployeesId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEmployeesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEmployeesId>>>
export type GetEmployeesIdQueryError = GetEmployeesId401 | GetEmployeesId404


export function useGetEmployeesId<TData = Awaited<ReturnType<typeof getEmployeesId>>, TError = GetEmployeesId401 | GetEmployeesId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmployeesId>>,
          TError,
          Awaited<ReturnType<typeof getEmployeesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEmployeesId<TData = Awaited<ReturnType<typeof getEmployeesId>>, TError = GetEmployeesId401 | GetEmployeesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEmployeesId>>,
          TError,
          Awaited<ReturnType<typeof getEmployeesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEmployeesId<TData = Awaited<ReturnType<typeof getEmployeesId>>, TError = GetEmployeesId401 | GetEmployeesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna informa√ß√µes um colaborador espec√≠fico.
 */

export function useGetEmployeesId<TData = Awaited<ReturnType<typeof getEmployeesId>>, TError = GetEmployeesId401 | GetEmployeesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEmployeesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEmployeesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Requer autentica√ß√£o via token JWT para garantir acesso seguro. Permite a atualiza√ß√£o das informa√ß√µes de um colaborador espec√≠fico, incluindo: nome completo, cargo, departamento, documentos pessoais, informa√ß√µes de contato e dados banc√°rios. O ID do colaborador deve ser fornecido como par√¢metro na URL. Todos os campos devem ser preenchidos conforme as especifica√ß√µes definidas no schema do corpo da requisi√ß√£o. Os dados s√£o validados antes do processamento para garantir a integridade e consist√™ncia das informa√ß√µes. A rota verifica a exist√™ncia do colaborador antes de realizar as altera√ß√µes.
 * @summary Altera as informa√ß√µes de um colaborador espec√≠fico.
 */
export const getPutEmployeesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/employees/${id}`
}

export const putEmployeesId = async (id: string,
    putEmployeesIdBody: PutEmployeesIdBody, options?: RequestInit): Promise<PutEmployeesId200> => {
  
  return http<PutEmployeesId200>(getPutEmployeesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putEmployeesIdBody,)
  }
);}




export const getPutEmployeesIdMutationOptions = <TError = PutEmployeesId401 | PutEmployeesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmployeesId>>, TError,{id: string;data: PutEmployeesIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putEmployeesId>>, TError,{id: string;data: PutEmployeesIdBody}, TContext> => {
    
const mutationKey = ['putEmployeesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEmployeesId>>, {id: string;data: PutEmployeesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putEmployeesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEmployeesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putEmployeesId>>>
    export type PutEmployeesIdMutationBody = PutEmployeesIdBody
    export type PutEmployeesIdMutationError = PutEmployeesId401 | PutEmployeesId404

    /**
 * @summary Altera as informa√ß√µes de um colaborador espec√≠fico.
 */
export const usePutEmployeesId = <TError = PutEmployeesId401 | PutEmployeesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEmployeesId>>, TError,{id: string;data: PutEmployeesIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putEmployeesId>>,
        TError,
        {id: string;data: PutEmployeesIdBody},
        TContext
      > => {

      const mutationOptions = getPutEmployeesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Requer autentica√ß√£o via token JWT para garantir acesso seguro. Permite a remo√ß√£o de um colaborador espec√≠fico do sistema atrav√©s do seu ID, que deve ser fornecido como par√¢metro na URL. A opera√ß√£o √© irrevers√≠vel e remove todos os dados associados ao colaborador. A rota verifica a exist√™ncia do colaborador antes de realizar a remo√ß√£o e garante que apenas usu√°rios autorizados possam executar esta a√ß√£o. Ap√≥s a remo√ß√£o bem-sucedida, o sistema retorna uma confirma√ß√£o da opera√ß√£o.
 * @summary Remove um colaborador espec√≠fico.
 */
export const getDeleteEmployeesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/employees/${id}`
}

export const deleteEmployeesId = async (id: string, options?: RequestInit): Promise<DeleteEmployeesId200> => {
  
  return http<DeleteEmployeesId200>(getDeleteEmployeesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteEmployeesIdMutationOptions = <TError = DeleteEmployeesId401 | DeleteEmployeesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmployeesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEmployeesId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteEmployeesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEmployeesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteEmployeesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEmployeesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEmployeesId>>>
    
    export type DeleteEmployeesIdMutationError = DeleteEmployeesId401 | DeleteEmployeesId404

    /**
 * @summary Remove um colaborador espec√≠fico.
 */
export const useDeleteEmployeesId = <TError = DeleteEmployeesId401 | DeleteEmployeesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEmployeesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteEmployeesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteEmployeesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Para cadastrar um novo produto, os dados devem ser enviados no corpo da requisi√ß√£o (request body) seguindo estritamente o schema de valida√ß√£o definido. Os campos obrigat√≥rios incluem nome, descri√ß√£o, pre√ßo e categoria do produto. O sistema validar√° automaticamente todos os dados enviados antes de realizar o cadastro.
 * @summary Cadastra um novo produto.
 */
export const getPostProductsUrl = () => {


  

  return `http://localhost:3333/products`
}

export const postProducts = async (postProductsBody: PostProductsBody, options?: RequestInit): Promise<PostProducts201> => {
  
  return http<PostProducts201>(getPostProductsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsBody,)
  }
);}




export const getPostProductsMutationOptions = <TError = PostProducts401 | PostProducts404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext> => {
    
const mutationKey = ['postProducts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProducts>>, {data: PostProductsBody}> = (props) => {
          const {data} = props ?? {};

          return  postProducts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postProducts>>>
    export type PostProductsMutationBody = PostProductsBody
    export type PostProductsMutationError = PostProducts401 | PostProducts404

    /**
 * @summary Cadastra um novo produto.
 */
export const usePostProducts = <TError = PostProducts401 | PostProducts404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProducts>>, TError,{data: PostProductsBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProducts>>,
        TError,
        {data: PostProductsBody},
        TContext
      > => {

      const mutationOptions = getPostProductsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Retorna uma lista paginada de produtos cadastrados no sistema. √â poss√≠vel filtrar os resultados atrav√©s de par√¢metros de consulta (query parameters) como p√°gina, limite por p√°gina, termo de busca e ordena√ß√£o. Os produtos s√£o retornados em ordem decrescente de data de cadastro por padr√£o. Todos os filtros s√£o opcionais e, caso n√£o sejam fornecidos, ser√£o utilizados valores padr√£o.
 * @summary Retorna uma lista de produtos cadastrados.
 */
export const getGetProductsUrl = (params?: GetProductsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/products?${stringifiedParams}` : `http://localhost:3333/products`
}

export const getProducts = async (params?: GetProductsParams, options?: RequestInit): Promise<GetProducts200> => {
  
  return http<GetProducts200>(getGetProductsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsQueryKey = (params?: GetProductsParams,) => {
    return [`http://localhost:3333/products`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsQueryOptions = <TData = Awaited<ReturnType<typeof getProducts>>, TError = GetProducts401>(params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({ signal }) => getProducts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getProducts>>>
export type GetProductsQueryError = GetProducts401


export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = GetProducts401>(
 params: undefined |  GetProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = GetProducts401>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          Awaited<ReturnType<typeof getProducts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = GetProducts401>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de produtos cadastrados.
 */

export function useGetProducts<TData = Awaited<ReturnType<typeof getProducts>>, TError = GetProducts401>(
 params?: GetProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Retorna informa√ß√µes detalhadas de um produto espec√≠fico com base no ID fornecido nos par√¢metros da URL. Os dados retornados incluem todas as informa√ß√µes cadastrais do produto, como nome, descri√ß√£o, pre√ßo, categoria, data de cadastro e √∫ltima atualiza√ß√£o. Caso o produto n√£o seja encontrado, ser√° retornado um erro apropriado.
 * @summary Retorna as informa√ß√µes de um produto espec√≠fico.
 */
export const getGetProductsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/${id}`
}

export const getProductsId = async (id: string, options?: RequestInit): Promise<GetProductsId200> => {
  
  return http<GetProductsId200>(getGetProductsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/products/${id}`] as const;
    }

    
export const getGetProductsIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductsId>>, TError = GetProductsId401 | GetProductsId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsId>>> = ({ signal }) => getProductsId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsId>>>
export type GetProductsIdQueryError = GetProductsId401 | GetProductsId404


export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = GetProductsId401 | GetProductsId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = GetProductsId401 | GetProductsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = GetProductsId401 | GetProductsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna as informa√ß√µes de um produto espec√≠fico.
 */

export function useGetProductsId<TData = Awaited<ReturnType<typeof getProductsId>>, TError = GetProductsId401 | GetProductsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Permite a atualiza√ß√£o das informa√ß√µes de um produto espec√≠fico identificado pelo ID fornecido nos par√¢metros da URL. Os dados a serem atualizados devem ser enviados no corpo da requisi√ß√£o (request body) seguindo o schema de valida√ß√£o definido. √â poss√≠vel atualizar um ou mais campos do produto, incluindo nome, descri√ß√£o, pre√ßo e categoria. O sistema validar√° automaticamente todos os dados enviados antes de realizar a atualiza√ß√£o. Caso o produto n√£o seja encontrado, ser√° retornado um erro apropriado.
 * @summary Altera as informa√ß√µes de um produto espec√≠fico.
 */
export const getPutProductsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/${id}`
}

export const putProductsId = async (id: string,
    putProductsIdBody: PutProductsIdBody, options?: RequestInit): Promise<PutProductsId200> => {
  
  return http<PutProductsId200>(getPutProductsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putProductsIdBody,)
  }
);}




export const getPutProductsIdMutationOptions = <TError = PutProductsId401 | PutProductsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext> => {
    
const mutationKey = ['putProductsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductsId>>, {id: string;data: PutProductsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putProductsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProductsId>>>
    export type PutProductsIdMutationBody = PutProductsIdBody
    export type PutProductsIdMutationError = PutProductsId401 | PutProductsId404

    /**
 * @summary Altera as informa√ß√µes de um produto espec√≠fico.
 */
export const usePutProductsId = <TError = PutProductsId401 | PutProductsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsId>>, TError,{id: string;data: PutProductsIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProductsId>>,
        TError,
        {id: string;data: PutProductsIdBody},
        TContext
      > => {

      const mutationOptions = getPutProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Permite a remo√ß√£o de um produto espec√≠fico do sistema com base no ID fornecido nos par√¢metros da URL. A opera√ß√£o √© irrevers√≠vel e todos os dados associados ao produto ser√£o permanentemente exclu√≠dos. √â importante notar que esta a√ß√£o n√£o pode ser desfeita ap√≥s a confirma√ß√£o. Caso o produto n√£o seja encontrado, ser√° retornado um erro apropriado.
 * @summary Remove um produto espec√≠fico.
 */
export const getDeleteProductsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/${id}`
}

export const deleteProductsId = async (id: string, options?: RequestInit): Promise<DeleteProductsId200> => {
  
  return http<DeleteProductsId200>(getDeleteProductsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsIdMutationOptions = <TError = DeleteProductsId401 | DeleteProductsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsId>>>
    
    export type DeleteProductsIdMutationError = DeleteProductsId401 | DeleteProductsId404

    /**
 * @summary Remove um produto espec√≠fico.
 */
export const useDeleteProductsId = <TError = DeleteProductsId401 | DeleteProductsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota requer autentica√ß√£o atrav√©s de um token JWT v√°lido. Permite o upload de uma imagem para um produto atrav√©s de uma requisi√ß√£o multipart/form-data. A imagem deve ser enviada como um arquivo no formato JPG, PNG ou WEBP, com tamanho m√°ximo de 5MB. O sistema processar√° automaticamente a imagem, otimizando-a para uso no sistema e armazenando-a de forma segura. A resposta incluir√° a URL da imagem ap√≥s o upload bem-sucedido. Em caso de falha no upload ou formato inv√°lido, ser√° retornado um erro apropriado.
 * @summary Upload de uma imagem para um produto.
 */
export const getPostProductsUploadUrl = () => {


  

  return `http://localhost:3333/products/upload`
}

export const postProductsUpload = async (postProductsUploadBody: PostProductsUploadBody, options?: RequestInit): Promise<PostProductsUpload201> => {
    const formData = new FormData();
if(postProductsUploadBody.file !== undefined) {
 formData.append('file', postProductsUploadBody.file)
 }

  return http<PostProductsUpload201>(getPostProductsUploadUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}




export const getPostProductsUploadMutationOptions = <TError = PostProductsUpload400 | PostProductsUpload401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsUpload>>, TError,{data: PostProductsUploadBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsUpload>>, TError,{data: PostProductsUploadBody}, TContext> => {
    
const mutationKey = ['postProductsUpload'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsUpload>>, {data: PostProductsUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsUpload(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsUpload>>>
    export type PostProductsUploadMutationBody = PostProductsUploadBody
    export type PostProductsUploadMutationError = PostProductsUpload400 | PostProductsUpload401

    /**
 * @summary Upload de uma imagem para um produto.
 */
export const usePostProductsUpload = <TError = PostProductsUpload400 | PostProductsUpload401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsUpload>>, TError,{data: PostProductsUploadBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsUpload>>,
        TError,
        {data: PostProductsUploadBody},
        TContext
      > => {

      const mutationOptions = getPostProductsUploadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Retorna uma lista completa de todas as unidades de medida dispon√≠veis para produtos no sistema. Essas unidades de medida s√£o utilizadas para definir as quantidades e dimens√µes dos produtos cadastrados. A listagem inclui unidades como quilogramas, litros, metros, entre outras medidas padr√£o.
 * @summary Retorna uma lista de unidades de medida de produtos.
 */
export const getGetProductsMeasurementUnitsUrl = () => {


  

  return `http://localhost:3333/products/measurement-units`
}

export const getProductsMeasurementUnits = async ( options?: RequestInit): Promise<GetProductsMeasurementUnits200Item[]> => {
  
  return http<GetProductsMeasurementUnits200Item[]>(getGetProductsMeasurementUnitsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsMeasurementUnitsQueryKey = () => {
    return [`http://localhost:3333/products/measurement-units`] as const;
    }

    
export const getGetProductsMeasurementUnitsQueryOptions = <TData = Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError = GetProductsMeasurementUnits401>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsMeasurementUnitsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsMeasurementUnits>>> = ({ signal }) => getProductsMeasurementUnits({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsMeasurementUnitsQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsMeasurementUnits>>>
export type GetProductsMeasurementUnitsQueryError = GetProductsMeasurementUnits401


export function useGetProductsMeasurementUnits<TData = Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError = GetProductsMeasurementUnits401>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsMeasurementUnits>>,
          TError,
          Awaited<ReturnType<typeof getProductsMeasurementUnits>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsMeasurementUnits<TData = Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError = GetProductsMeasurementUnits401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsMeasurementUnits>>,
          TError,
          Awaited<ReturnType<typeof getProductsMeasurementUnits>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsMeasurementUnits<TData = Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError = GetProductsMeasurementUnits401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de unidades de medida de produtos.
 */

export function useGetProductsMeasurementUnits<TData = Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError = GetProductsMeasurementUnits401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsMeasurementUnits>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsMeasurementUnitsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota requer autentica√ß√£o via JWT (JSON Web Token) para garantir a seguran√ßa do acesso. Permite o cadastro de uma nova marca no sistema, possibilitando a inclus√£o de informa√ß√µes essenciais como nome e descri√ß√£o detalhada. A marca, uma vez cadastrada, servir√° como refer√™ncia para categoriza√ß√£o e organiza√ß√£o do cat√°logo de produtos, podendo ser vinculada a m√∫ltiplos itens durante o processo de cria√ß√£o e atualiza√ß√£o de produtos. O cadastro adequado das marcas √© fundamental para manter a consist√™ncia e rastreabilidade dos produtos no sistema.
 * @summary Cadastra uma nova marca.
 */
export const getPostProductsBrandsUrl = () => {


  

  return `http://localhost:3333/products/brands`
}

export const postProductsBrands = async (postProductsBrandsBody: PostProductsBrandsBody, options?: RequestInit): Promise<PostProductsBrands201> => {
  
  return http<PostProductsBrands201>(getPostProductsBrandsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsBrandsBody,)
  }
);}




export const getPostProductsBrandsMutationOptions = <TError = PostProductsBrands401 | PostProductsBrands409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsBrands>>, TError,{data: PostProductsBrandsBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsBrands>>, TError,{data: PostProductsBrandsBody}, TContext> => {
    
const mutationKey = ['postProductsBrands'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsBrands>>, {data: PostProductsBrandsBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsBrands(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsBrandsMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsBrands>>>
    export type PostProductsBrandsMutationBody = PostProductsBrandsBody
    export type PostProductsBrandsMutationError = PostProductsBrands401 | PostProductsBrands409

    /**
 * @summary Cadastra uma nova marca.
 */
export const usePostProductsBrands = <TError = PostProductsBrands401 | PostProductsBrands409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsBrands>>, TError,{data: PostProductsBrandsBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsBrands>>,
        TError,
        {data: PostProductsBrandsBody},
        TContext
      > => {

      const mutationOptions = getPostProductsBrandsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota requer autentica√ß√£o via JWT (JSON Web Token) para garantir a seguran√ßa do acesso. Fornece uma listagem completa das marcas cadastradas no sistema, incluindo seus identificadores √∫nicos, nomes e descri√ß√µes. A consulta permite visualizar todas as marcas dispon√≠veis para associa√ß√£o com produtos, facilitando a gest√£o e organiza√ß√£o do cat√°logo. Os dados retornados podem ser utilizados para diversos fins, como preenchimento de formul√°rios de cadastro de produtos, relat√≥rios gerenciais e an√°lises de portf√≥lio.
 * @summary Retorna uma lista de marcas cadastradas.
 */
export const getGetProductsBrandsUrl = () => {


  

  return `http://localhost:3333/products/brands`
}

export const getProductsBrands = async ( options?: RequestInit): Promise<GetProductsBrands200Item[]> => {
  
  return http<GetProductsBrands200Item[]>(getGetProductsBrandsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsBrandsQueryKey = () => {
    return [`http://localhost:3333/products/brands`] as const;
    }

    
export const getGetProductsBrandsQueryOptions = <TData = Awaited<ReturnType<typeof getProductsBrands>>, TError = GetProductsBrands401>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsBrandsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsBrands>>> = ({ signal }) => getProductsBrands({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsBrandsQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsBrands>>>
export type GetProductsBrandsQueryError = GetProductsBrands401


export function useGetProductsBrands<TData = Awaited<ReturnType<typeof getProductsBrands>>, TError = GetProductsBrands401>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsBrands>>,
          TError,
          Awaited<ReturnType<typeof getProductsBrands>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsBrands<TData = Awaited<ReturnType<typeof getProductsBrands>>, TError = GetProductsBrands401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsBrands>>,
          TError,
          Awaited<ReturnType<typeof getProductsBrands>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsBrands<TData = Awaited<ReturnType<typeof getProductsBrands>>, TError = GetProductsBrands401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de marcas cadastradas.
 */

export function useGetProductsBrands<TData = Awaited<ReturnType<typeof getProductsBrands>>, TError = GetProductsBrands401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsBrands>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsBrandsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota requer autentica√ß√£o via JWT (JSON Web Token) para garantir a seguran√ßa do acesso. Permite a remo√ß√£o permanente de uma marca espec√≠fica do sistema atrav√©s do seu identificador √∫nico (ID). Antes da exclus√£o, o sistema verifica se a marca n√£o est√° vinculada a nenhum produto ativo para evitar inconsist√™ncias no banco de dados. A opera√ß√£o √© irrevers√≠vel, portanto, recomenda-se cautela ao utiliz√°-la. √â importante notar que o hist√≥rico de transa√ß√µes e registros relacionados √† marca permanecer√£o preservados para fins de auditoria, mesmo ap√≥s sua remo√ß√£o.
 * @summary Remove uma marca espec√≠fica.
 */
export const getDeleteProductsBrandsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/brands/${id}`
}

export const deleteProductsBrandsId = async (id: string, options?: RequestInit): Promise<DeleteProductsBrandsId200> => {
  
  return http<DeleteProductsBrandsId200>(getDeleteProductsBrandsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsBrandsIdMutationOptions = <TError = DeleteProductsBrandsId401 | DeleteProductsBrandsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsBrandsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsBrandsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsBrandsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsBrandsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsBrandsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsBrandsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsBrandsId>>>
    
    export type DeleteProductsBrandsIdMutationError = DeleteProductsBrandsId401 | DeleteProductsBrandsId404

    /**
 * @summary Remove uma marca espec√≠fica.
 */
export const useDeleteProductsBrandsId = <TError = DeleteProductsBrandsId401 | DeleteProductsBrandsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsBrandsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsBrandsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsBrandsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite o cadastro de uma nova categoria de produto no sistema. A categoria criada poder√° ser utilizada para classificar e organizar produtos de forma eficiente no cat√°logo. √â necess√°rio fornecer um nome √∫nico para a categoria, garantindo que n√£o existam duplicatas. A categoriza√ß√£o adequada facilita a busca e filtragem de produtos tanto para gest√£o interna quanto para exibi√ß√£o aos clientes.
 * @summary Cadastra uma nova categoria de produto.
 */
export const getPostProductsCategoriesUrl = () => {


  

  return `http://localhost:3333/products/categories`
}

export const postProductsCategories = async (postProductsCategoriesBody: PostProductsCategoriesBody, options?: RequestInit): Promise<PostProductsCategories201> => {
  
  return http<PostProductsCategories201>(getPostProductsCategoriesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsCategoriesBody,)
  }
);}




export const getPostProductsCategoriesMutationOptions = <TError = PostProductsCategories401 | PostProductsCategories409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsCategories>>, TError,{data: PostProductsCategoriesBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsCategories>>, TError,{data: PostProductsCategoriesBody}, TContext> => {
    
const mutationKey = ['postProductsCategories'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsCategories>>, {data: PostProductsCategoriesBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsCategories(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsCategories>>>
    export type PostProductsCategoriesMutationBody = PostProductsCategoriesBody
    export type PostProductsCategoriesMutationError = PostProductsCategories401 | PostProductsCategories409

    /**
 * @summary Cadastra uma nova categoria de produto.
 */
export const usePostProductsCategories = <TError = PostProductsCategories401 | PostProductsCategories409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsCategories>>, TError,{data: PostProductsCategoriesBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsCategories>>,
        TError,
        {data: PostProductsCategoriesBody},
        TContext
      > => {

      const mutationOptions = getPostProductsCategoriesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota retorna uma lista completa de todas as categorias de produtos cadastradas no sistema. As categorias s√£o elementos fundamentais para a organiza√ß√£o e classifica√ß√£o dos produtos, permitindo uma gest√£o eficiente do cat√°logo. A listagem inclui informa√ß√µes como ID e nome de cada categoria, facilitando a visualiza√ß√£o e sele√ß√£o das categorias dispon√≠veis para uso na categoriza√ß√£o de produtos.
 * @summary Retorna uma lista de categorias de produtos cadastradas.
 */
export const getGetProductsCategoriesUrl = () => {


  

  return `http://localhost:3333/products/categories`
}

export const getProductsCategories = async ( options?: RequestInit): Promise<GetProductsCategories200Item[]> => {
  
  return http<GetProductsCategories200Item[]>(getGetProductsCategoriesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsCategoriesQueryKey = () => {
    return [`http://localhost:3333/products/categories`] as const;
    }

    
export const getGetProductsCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getProductsCategories>>, TError = GetProductsCategories401>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsCategories>>> = ({ signal }) => getProductsCategories({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsCategories>>>
export type GetProductsCategoriesQueryError = GetProductsCategories401


export function useGetProductsCategories<TData = Awaited<ReturnType<typeof getProductsCategories>>, TError = GetProductsCategories401>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsCategories>>,
          TError,
          Awaited<ReturnType<typeof getProductsCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsCategories<TData = Awaited<ReturnType<typeof getProductsCategories>>, TError = GetProductsCategories401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsCategories>>,
          TError,
          Awaited<ReturnType<typeof getProductsCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsCategories<TData = Awaited<ReturnType<typeof getProductsCategories>>, TError = GetProductsCategories401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de categorias de produtos cadastradas.
 */

export function useGetProductsCategories<TData = Awaited<ReturnType<typeof getProductsCategories>>, TError = GetProductsCategories401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsCategories>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsCategoriesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite a remo√ß√£o de uma categoria de produto espec√≠fica do sistema. A opera√ß√£o √© irrevers√≠vel e requer o ID da categoria como par√¢metro. √â importante verificar se a categoria n√£o est√° sendo utilizada por nenhum produto antes da remo√ß√£o para evitar inconsist√™ncias no sistema. A remo√ß√£o de categorias deve ser realizada com cautela, pois pode impactar a organiza√ß√£o e classifica√ß√£o dos produtos existentes.
 * @summary Remove uma categoria de produto espec√≠fica.
 */
export const getDeleteProductsCategoriesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/categories/${id}`
}

export const deleteProductsCategoriesId = async (id: string, options?: RequestInit): Promise<DeleteProductsCategoriesId200> => {
  
  return http<DeleteProductsCategoriesId200>(getDeleteProductsCategoriesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsCategoriesIdMutationOptions = <TError = DeleteProductsCategoriesId401 | DeleteProductsCategoriesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsCategoriesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsCategoriesId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsCategoriesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsCategoriesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsCategoriesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsCategoriesId>>>
    
    export type DeleteProductsCategoriesIdMutationError = DeleteProductsCategoriesId401 | DeleteProductsCategoriesId404

    /**
 * @summary Remove uma categoria de produto espec√≠fica.
 */
export const useDeleteProductsCategoriesId = <TError = DeleteProductsCategoriesId401 | DeleteProductsCategoriesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsCategoriesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsCategoriesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * O nome do atributo √© uma caracter√≠stica que pode ser associada a diferentes produtos, como por exemplo "Cor", "Tamanho", "Material", etc. Este registro √© necess√°rio antes de cadastrar valores espec√≠ficos para cada atributo.
 * @summary Registra um novo nome de atributo de produto.
 */
export const getPostProductsAttributesNamesUrl = () => {


  

  return `http://localhost:3333/products/attributes/names`
}

export const postProductsAttributesNames = async (postProductsAttributesNamesBody: PostProductsAttributesNamesBody, options?: RequestInit): Promise<PostProductsAttributesNames201> => {
  
  return http<PostProductsAttributesNames201>(getPostProductsAttributesNamesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsAttributesNamesBody,)
  }
);}




export const getPostProductsAttributesNamesMutationOptions = <TError = PostProductsAttributesNames401 | PostProductsAttributesNames409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesNames>>, TError,{data: PostProductsAttributesNamesBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesNames>>, TError,{data: PostProductsAttributesNamesBody}, TContext> => {
    
const mutationKey = ['postProductsAttributesNames'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsAttributesNames>>, {data: PostProductsAttributesNamesBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsAttributesNames(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsAttributesNamesMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsAttributesNames>>>
    export type PostProductsAttributesNamesMutationBody = PostProductsAttributesNamesBody
    export type PostProductsAttributesNamesMutationError = PostProductsAttributesNames401 | PostProductsAttributesNames409

    /**
 * @summary Registra um novo nome de atributo de produto.
 */
export const usePostProductsAttributesNames = <TError = PostProductsAttributesNames401 | PostProductsAttributesNames409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesNames>>, TError,{data: PostProductsAttributesNamesBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsAttributesNames>>,
        TError,
        {data: PostProductsAttributesNamesBody},
        TContext
      > => {

      const mutationOptions = getPostProductsAttributesNamesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota retorna uma lista paginada de nomes de atributos de produtos cadastrados no sistema. Os resultados podem ser filtrados e ordenados atrav√©s dos par√¢metros de consulta dispon√≠veis. Cada item da lista cont√©m informa√ß√µes como o identificador √∫nico, nome do atributo e data de cadastro.
 * @summary Retorna uma lista de nomes de atributos de produto.
 */
export const getGetProductsAttributesNamesUrl = (params?: GetProductsAttributesNamesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/products/attributes/names?${stringifiedParams}` : `http://localhost:3333/products/attributes/names`
}

export const getProductsAttributesNames = async (params?: GetProductsAttributesNamesParams, options?: RequestInit): Promise<GetProductsAttributesNames200> => {
  
  return http<GetProductsAttributesNames200>(getGetProductsAttributesNamesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsAttributesNamesQueryKey = (params?: GetProductsAttributesNamesParams,) => {
    return [`http://localhost:3333/products/attributes/names`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsAttributesNamesQueryOptions = <TData = Awaited<ReturnType<typeof getProductsAttributesNames>>, TError = GetProductsAttributesNames401>(params?: GetProductsAttributesNamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsAttributesNamesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsAttributesNames>>> = ({ signal }) => getProductsAttributesNames(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsAttributesNamesQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsAttributesNames>>>
export type GetProductsAttributesNamesQueryError = GetProductsAttributesNames401


export function useGetProductsAttributesNames<TData = Awaited<ReturnType<typeof getProductsAttributesNames>>, TError = GetProductsAttributesNames401>(
 params: undefined |  GetProductsAttributesNamesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesNames>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesNames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesNames<TData = Awaited<ReturnType<typeof getProductsAttributesNames>>, TError = GetProductsAttributesNames401>(
 params?: GetProductsAttributesNamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesNames>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesNames>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesNames<TData = Awaited<ReturnType<typeof getProductsAttributesNames>>, TError = GetProductsAttributesNames401>(
 params?: GetProductsAttributesNamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de nomes de atributos de produto.
 */

export function useGetProductsAttributesNames<TData = Awaited<ReturnType<typeof getProductsAttributesNames>>, TError = GetProductsAttributesNames401>(
 params?: GetProductsAttributesNamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNames>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsAttributesNamesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * O valor do atributo √© um dado espec√≠fico que pode ser associado a um nome de atributo previamente cadastrado. Por exemplo, para o atributo "Cor", podem ser cadastrados valores como "Vermelho", "Azul", "Verde", etc. √â necess√°rio ter um nome de atributo cadastrado antes de registrar seus valores correspondentes.
 * @summary Registra um novo valor de atributo de produto.
 */
export const getPostProductsAttributesValuesUrl = () => {


  

  return `http://localhost:3333/products/attributes/values`
}

export const postProductsAttributesValues = async (postProductsAttributesValuesBody: PostProductsAttributesValuesBody, options?: RequestInit): Promise<PostProductsAttributesValues201> => {
  
  return http<PostProductsAttributesValues201>(getPostProductsAttributesValuesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsAttributesValuesBody,)
  }
);}




export const getPostProductsAttributesValuesMutationOptions = <TError = PostProductsAttributesValues401 | PostProductsAttributesValues409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesValues>>, TError,{data: PostProductsAttributesValuesBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesValues>>, TError,{data: PostProductsAttributesValuesBody}, TContext> => {
    
const mutationKey = ['postProductsAttributesValues'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsAttributesValues>>, {data: PostProductsAttributesValuesBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsAttributesValues(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsAttributesValuesMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsAttributesValues>>>
    export type PostProductsAttributesValuesMutationBody = PostProductsAttributesValuesBody
    export type PostProductsAttributesValuesMutationError = PostProductsAttributesValues401 | PostProductsAttributesValues409

    /**
 * @summary Registra um novo valor de atributo de produto.
 */
export const usePostProductsAttributesValues = <TError = PostProductsAttributesValues401 | PostProductsAttributesValues409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsAttributesValues>>, TError,{data: PostProductsAttributesValuesBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsAttributesValues>>,
        TError,
        {data: PostProductsAttributesValuesBody},
        TContext
      > => {

      const mutationOptions = getPostProductsAttributesValuesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota retorna uma lista paginada de valores de atributos de produtos cadastrados no sistema. Os resultados podem ser filtrados e ordenados atrav√©s dos par√¢metros de consulta dispon√≠veis. Cada item da lista cont√©m informa√ß√µes como o identificador √∫nico, valor do atributo, nome do atributo associado e data de cadastro.
 * @summary Retorna uma lista de valores de atributos de produto.
 */
export const getGetProductsAttributesValuesUrl = (params: GetProductsAttributesValuesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/products/attributes/values?${stringifiedParams}` : `http://localhost:3333/products/attributes/values`
}

export const getProductsAttributesValues = async (params: GetProductsAttributesValuesParams, options?: RequestInit): Promise<GetProductsAttributesValues200> => {
  
  return http<GetProductsAttributesValues200>(getGetProductsAttributesValuesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsAttributesValuesQueryKey = (params: GetProductsAttributesValuesParams,) => {
    return [`http://localhost:3333/products/attributes/values`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsAttributesValuesQueryOptions = <TData = Awaited<ReturnType<typeof getProductsAttributesValues>>, TError = GetProductsAttributesValues401>(params: GetProductsAttributesValuesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsAttributesValuesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsAttributesValues>>> = ({ signal }) => getProductsAttributesValues(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsAttributesValuesQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsAttributesValues>>>
export type GetProductsAttributesValuesQueryError = GetProductsAttributesValues401


export function useGetProductsAttributesValues<TData = Awaited<ReturnType<typeof getProductsAttributesValues>>, TError = GetProductsAttributesValues401>(
 params: GetProductsAttributesValuesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesValues>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesValues>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesValues<TData = Awaited<ReturnType<typeof getProductsAttributesValues>>, TError = GetProductsAttributesValues401>(
 params: GetProductsAttributesValuesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesValues>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesValues>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesValues<TData = Awaited<ReturnType<typeof getProductsAttributesValues>>, TError = GetProductsAttributesValues401>(
 params: GetProductsAttributesValuesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de valores de atributos de produto.
 */

export function useGetProductsAttributesValues<TData = Awaited<ReturnType<typeof getProductsAttributesValues>>, TError = GetProductsAttributesValues401>(
 params: GetProductsAttributesValuesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValues>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsAttributesValuesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota retorna informa√ß√µes detalhadas sobre um nome de atributo de produto espec√≠fico. Os dados retornados incluem o identificador √∫nico, nome do atributo, data de cadastro e √∫ltima atualiza√ß√£o, al√©m de uma lista dos valores associados a este atributo. √â necess√°rio fornecer o ID do nome do atributo como par√¢metro na URL.
 * @summary Retorna as informa√ß√µes de um nome de atributo de produto espec√≠fico.
 */
export const getGetProductsAttributesNamesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/names/${id}`
}

export const getProductsAttributesNamesId = async (id: string, options?: RequestInit): Promise<GetProductsAttributesNamesId200> => {
  
  return http<GetProductsAttributesNamesId200>(getGetProductsAttributesNamesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsAttributesNamesIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/products/attributes/names/${id}`] as const;
    }

    
export const getGetProductsAttributesNamesIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsAttributesNamesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsAttributesNamesId>>> = ({ signal }) => getProductsAttributesNamesId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsAttributesNamesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsAttributesNamesId>>>
export type GetProductsAttributesNamesIdQueryError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404


export function useGetProductsAttributesNamesId<TData = Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesNamesId>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesNamesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesNamesId<TData = Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesNamesId>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesNamesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesNamesId<TData = Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna as informa√ß√µes de um nome de atributo de produto espec√≠fico.
 */

export function useGetProductsAttributesNamesId<TData = Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError = GetProductsAttributesNamesId401 | GetProductsAttributesNamesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesNamesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsAttributesNamesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite atualizar as informa√ß√µes de um nome de atributo de produto espec√≠fico. √â necess√°rio fornecer o ID do nome do atributo como par√¢metro na URL e os novos dados no corpo da requisi√ß√£o. A atualiza√ß√£o pode incluir a modifica√ß√£o do nome do atributo. O sistema verifica a exist√™ncia do atributo e garante que n√£o haja duplicidade de nomes antes de realizar a atualiza√ß√£o.
 * @summary Altera um nome de atributo de produto espec√≠fico.
 */
export const getPutProductsAttributesNamesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/names/${id}`
}

export const putProductsAttributesNamesId = async (id: string,
    putProductsAttributesNamesIdBody: PutProductsAttributesNamesIdBody, options?: RequestInit): Promise<PutProductsAttributesNamesId200> => {
  
  return http<PutProductsAttributesNamesId200>(getPutProductsAttributesNamesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putProductsAttributesNamesIdBody,)
  }
);}




export const getPutProductsAttributesNamesIdMutationOptions = <TError = PutProductsAttributesNamesId401 | PutProductsAttributesNamesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesNamesId>>, TError,{id: string;data: PutProductsAttributesNamesIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesNamesId>>, TError,{id: string;data: PutProductsAttributesNamesIdBody}, TContext> => {
    
const mutationKey = ['putProductsAttributesNamesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductsAttributesNamesId>>, {id: string;data: PutProductsAttributesNamesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putProductsAttributesNamesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductsAttributesNamesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProductsAttributesNamesId>>>
    export type PutProductsAttributesNamesIdMutationBody = PutProductsAttributesNamesIdBody
    export type PutProductsAttributesNamesIdMutationError = PutProductsAttributesNamesId401 | PutProductsAttributesNamesId404

    /**
 * @summary Altera um nome de atributo de produto espec√≠fico.
 */
export const usePutProductsAttributesNamesId = <TError = PutProductsAttributesNamesId401 | PutProductsAttributesNamesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesNamesId>>, TError,{id: string;data: PutProductsAttributesNamesIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProductsAttributesNamesId>>,
        TError,
        {id: string;data: PutProductsAttributesNamesIdBody},
        TContext
      > => {

      const mutationOptions = getPutProductsAttributesNamesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite remover um nome de atributo de produto espec√≠fico do sistema. √â necess√°rio fornecer o ID do nome do atributo como par√¢metro na URL. O sistema verifica se o nome do atributo n√£o est√° sendo utilizado em produtos ativos antes de realizar a remo√ß√£o. A remo√ß√£o de um nome de atributo tamb√©m remove automaticamente todos os valores de atributo associados a ele. Esta opera√ß√£o √© irrevers√≠vel.
 * @summary Remove um nome de atributo de produto espec√≠fico.
 */
export const getDeleteProductsAttributesNamesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/names/${id}`
}

export const deleteProductsAttributesNamesId = async (id: string, options?: RequestInit): Promise<DeleteProductsAttributesNamesId200> => {
  
  return http<DeleteProductsAttributesNamesId200>(getDeleteProductsAttributesNamesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsAttributesNamesIdMutationOptions = <TError = DeleteProductsAttributesNamesId401 | DeleteProductsAttributesNamesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsAttributesNamesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsAttributesNamesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsAttributesNamesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>>
    
    export type DeleteProductsAttributesNamesIdMutationError = DeleteProductsAttributesNamesId401 | DeleteProductsAttributesNamesId404

    /**
 * @summary Remove um nome de atributo de produto espec√≠fico.
 */
export const useDeleteProductsAttributesNamesId = <TError = DeleteProductsAttributesNamesId401 | DeleteProductsAttributesNamesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsAttributesNamesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsAttributesNamesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota retorna informa√ß√µes detalhadas sobre um valor de atributo de produto espec√≠fico. Os dados retornados incluem o identificador √∫nico, o valor do atributo, o nome do atributo ao qual est√° associado, data de cadastro e √∫ltima atualiza√ß√£o. √â necess√°rio fornecer o ID do valor do atributo como par√¢metro na URL.
 * @summary Retorna as informa√ß√µes de um valor de atributo de produto espec√≠fico.
 */
export const getGetProductsAttributesValuesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/values/${id}`
}

export const getProductsAttributesValuesId = async (id: string, options?: RequestInit): Promise<GetProductsAttributesValuesId200> => {
  
  return http<GetProductsAttributesValuesId200>(getGetProductsAttributesValuesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsAttributesValuesIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/products/attributes/values/${id}`] as const;
    }

    
export const getGetProductsAttributesValuesIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsAttributesValuesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsAttributesValuesId>>> = ({ signal }) => getProductsAttributesValuesId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsAttributesValuesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsAttributesValuesId>>>
export type GetProductsAttributesValuesIdQueryError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404


export function useGetProductsAttributesValuesId<TData = Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesValuesId>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesValuesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesValuesId<TData = Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsAttributesValuesId>>,
          TError,
          Awaited<ReturnType<typeof getProductsAttributesValuesId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsAttributesValuesId<TData = Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna as informa√ß√µes de um valor de atributo de produto espec√≠fico.
 */

export function useGetProductsAttributesValuesId<TData = Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError = GetProductsAttributesValuesId401 | GetProductsAttributesValuesId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsAttributesValuesId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsAttributesValuesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite atualizar as informa√ß√µes de um valor de atributo de produto espec√≠fico. √â necess√°rio fornecer o ID do valor do atributo como par√¢metro na URL e os novos dados no corpo da requisi√ß√£o. A atualiza√ß√£o pode incluir a modifica√ß√£o do valor do atributo e/ou a associa√ß√£o com um nome de atributo diferente. O sistema verifica a exist√™ncia do valor do atributo e do nome do atributo associado, al√©m de garantir que n√£o haja duplicidade de valores para o mesmo nome de atributo antes de realizar a atualiza√ß√£o.
 * @summary Altera um valor de atributo de produto espec√≠fico.
 */
export const getPutProductsAttributesValuesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/values/${id}`
}

export const putProductsAttributesValuesId = async (id: string,
    putProductsAttributesValuesIdBody: PutProductsAttributesValuesIdBody, options?: RequestInit): Promise<PutProductsAttributesValuesId200> => {
  
  return http<PutProductsAttributesValuesId200>(getPutProductsAttributesValuesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putProductsAttributesValuesIdBody,)
  }
);}




export const getPutProductsAttributesValuesIdMutationOptions = <TError = PutProductsAttributesValuesId401 | PutProductsAttributesValuesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesValuesId>>, TError,{id: string;data: PutProductsAttributesValuesIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesValuesId>>, TError,{id: string;data: PutProductsAttributesValuesIdBody}, TContext> => {
    
const mutationKey = ['putProductsAttributesValuesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductsAttributesValuesId>>, {id: string;data: PutProductsAttributesValuesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putProductsAttributesValuesId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductsAttributesValuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProductsAttributesValuesId>>>
    export type PutProductsAttributesValuesIdMutationBody = PutProductsAttributesValuesIdBody
    export type PutProductsAttributesValuesIdMutationError = PutProductsAttributesValuesId401 | PutProductsAttributesValuesId404

    /**
 * @summary Altera um valor de atributo de produto espec√≠fico.
 */
export const usePutProductsAttributesValuesId = <TError = PutProductsAttributesValuesId401 | PutProductsAttributesValuesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsAttributesValuesId>>, TError,{id: string;data: PutProductsAttributesValuesIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProductsAttributesValuesId>>,
        TError,
        {id: string;data: PutProductsAttributesValuesIdBody},
        TContext
      > => {

      const mutationOptions = getPutProductsAttributesValuesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite remover um valor de atributo de produto espec√≠fico do sistema. √â necess√°rio fornecer o ID do valor do atributo como par√¢metro na URL. O sistema verifica se o valor do atributo n√£o est√° sendo utilizado em produtos ativos antes de realizar a remo√ß√£o. Esta opera√ß√£o √© irrevers√≠vel e deve ser utilizada com cautela, pois pode afetar o hist√≥rico de produtos que utilizaram este valor de atributo.
 * @summary Remove um valor de atributo de produto espec√≠fico.
 */
export const getDeleteProductsAttributesValuesIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/attributes/values/${id}`
}

export const deleteProductsAttributesValuesId = async (id: string, options?: RequestInit): Promise<DeleteProductsAttributesValuesId200> => {
  
  return http<DeleteProductsAttributesValuesId200>(getDeleteProductsAttributesValuesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsAttributesValuesIdMutationOptions = <TError = DeleteProductsAttributesValuesId401 | DeleteProductsAttributesValuesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsAttributesValuesId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsAttributesValuesId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsAttributesValuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>>
    
    export type DeleteProductsAttributesValuesIdMutationError = DeleteProductsAttributesValuesId401 | DeleteProductsAttributesValuesId404

    /**
 * @summary Remove um valor de atributo de produto espec√≠fico.
 */
export const useDeleteProductsAttributesValuesId = <TError = DeleteProductsAttributesValuesId401 | DeleteProductsAttributesValuesId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsAttributesValuesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsAttributesValuesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite o cadastro de varia√ß√µes de produtos no sistema. Uma varia√ß√£o representa uma vers√£o espec√≠fica de um produto base, podendo ter caracter√≠sticas √∫nicas como tamanho, cor, modelo, material ou outras especifica√ß√µes. Cada varia√ß√£o pode ter seu pr√≥prio pre√ßo, c√≥digo SKU e controle de estoque independente. O acesso a esta funcionalidade requer autentica√ß√£o pr√©via atrav√©s de token JWT v√°lido. As varia√ß√µes cadastradas podem ser posteriormente consultadas, atualizadas ou removidas atrav√©s das demais rotas dispon√≠veis.
 * @summary Cadastra uma nova varia√ß√£o de produto.
 */
export const getPostProductsVariationsUrl = () => {


  

  return `http://localhost:3333/products/variations`
}

export const postProductsVariations = async (postProductsVariationsBody: PostProductsVariationsBody, options?: RequestInit): Promise<PostProductsVariations201> => {
  
  return http<PostProductsVariations201>(getPostProductsVariationsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postProductsVariationsBody,)
  }
);}




export const getPostProductsVariationsMutationOptions = <TError = PostProductsVariations401 | PostProductsVariations409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsVariations>>, TError,{data: PostProductsVariationsBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsVariations>>, TError,{data: PostProductsVariationsBody}, TContext> => {
    
const mutationKey = ['postProductsVariations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsVariations>>, {data: PostProductsVariationsBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsVariations(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsVariationsMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsVariations>>>
    export type PostProductsVariationsMutationBody = PostProductsVariationsBody
    export type PostProductsVariationsMutationError = PostProductsVariations401 | PostProductsVariations409

    /**
 * @summary Cadastra uma nova varia√ß√£o de produto.
 */
export const usePostProductsVariations = <TError = PostProductsVariations401 | PostProductsVariations409,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsVariations>>, TError,{data: PostProductsVariationsBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProductsVariations>>,
        TError,
        {data: PostProductsVariationsBody},
        TContext
      > => {

      const mutationOptions = getPostProductsVariationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite a listagem de todas as varia√ß√µes de produtos cadastradas no sistema. As varia√ß√µes s√£o vers√µes espec√≠ficas dos produtos base, contendo informa√ß√µes como pre√ßo, SKU, estoque e caracter√≠sticas √∫nicas (tamanho, cor, modelo, etc.). A listagem pode ser filtrada e paginada atrav√©s dos par√¢metros de consulta dispon√≠veis. Os resultados incluem detalhes completos de cada varia√ß√£o, permitindo uma vis√£o abrangente do cat√°logo de produtos. O acesso a esta funcionalidade requer autentica√ß√£o pr√©via atrav√©s de token JWT v√°lido.
 * @summary Retorna uma lista de varia√ß√µes de produtos.
 */
export const getGetProductsVariationsUrl = (params?: GetProductsVariationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/products/variations?${stringifiedParams}` : `http://localhost:3333/products/variations`
}

export const getProductsVariations = async (params?: GetProductsVariationsParams, options?: RequestInit): Promise<GetProductsVariations200> => {
  
  return http<GetProductsVariations200>(getGetProductsVariationsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsVariationsQueryKey = (params?: GetProductsVariationsParams,) => {
    return [`http://localhost:3333/products/variations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsVariationsQueryOptions = <TData = Awaited<ReturnType<typeof getProductsVariations>>, TError = GetProductsVariations401 | GetProductsVariations404>(params?: GetProductsVariationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsVariationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsVariations>>> = ({ signal }) => getProductsVariations(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsVariationsQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsVariations>>>
export type GetProductsVariationsQueryError = GetProductsVariations401 | GetProductsVariations404


export function useGetProductsVariations<TData = Awaited<ReturnType<typeof getProductsVariations>>, TError = GetProductsVariations401 | GetProductsVariations404>(
 params: undefined |  GetProductsVariationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsVariations>>,
          TError,
          Awaited<ReturnType<typeof getProductsVariations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsVariations<TData = Awaited<ReturnType<typeof getProductsVariations>>, TError = GetProductsVariations401 | GetProductsVariations404>(
 params?: GetProductsVariationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsVariations>>,
          TError,
          Awaited<ReturnType<typeof getProductsVariations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsVariations<TData = Awaited<ReturnType<typeof getProductsVariations>>, TError = GetProductsVariations401 | GetProductsVariations404>(
 params?: GetProductsVariationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de varia√ß√µes de produtos.
 */

export function useGetProductsVariations<TData = Awaited<ReturnType<typeof getProductsVariations>>, TError = GetProductsVariations401 | GetProductsVariations404>(
 params?: GetProductsVariationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariations>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsVariationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite consultar informa√ß√µes detalhadas de uma varia√ß√£o espec√≠fica de produto atrav√©s do seu ID. Retorna dados completos como pre√ßo, SKU, estoque, caracter√≠sticas espec√≠ficas (tamanho, cor, modelo, etc.) e outras informa√ß√µes relevantes da varia√ß√£o. √â poss√≠vel verificar o status atual do estoque, disponibilidade e demais atributos √∫nicos desta vers√£o do produto. O acesso a esta funcionalidade requer autentica√ß√£o pr√©via atrav√©s de token JWT v√°lido.
 * @summary Retorna as informa√ß√µes de uma varia√ß√£o de produto espec√≠fica.
 */
export const getGetProductsVariationsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/variations/${id}`
}

export const getProductsVariationsId = async (id: string, options?: RequestInit): Promise<GetProductsVariationsId200> => {
  
  return http<GetProductsVariationsId200>(getGetProductsVariationsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetProductsVariationsIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/products/variations/${id}`] as const;
    }

    
export const getGetProductsVariationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductsVariationsId>>, TError = GetProductsVariationsId401 | GetProductsVariationsId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsVariationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsVariationsId>>> = ({ signal }) => getProductsVariationsId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsVariationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsVariationsId>>>
export type GetProductsVariationsIdQueryError = GetProductsVariationsId401 | GetProductsVariationsId404


export function useGetProductsVariationsId<TData = Awaited<ReturnType<typeof getProductsVariationsId>>, TError = GetProductsVariationsId401 | GetProductsVariationsId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsVariationsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsVariationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsVariationsId<TData = Awaited<ReturnType<typeof getProductsVariationsId>>, TError = GetProductsVariationsId401 | GetProductsVariationsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsVariationsId>>,
          TError,
          Awaited<ReturnType<typeof getProductsVariationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsVariationsId<TData = Awaited<ReturnType<typeof getProductsVariationsId>>, TError = GetProductsVariationsId401 | GetProductsVariationsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna as informa√ß√µes de uma varia√ß√£o de produto espec√≠fica.
 */

export function useGetProductsVariationsId<TData = Awaited<ReturnType<typeof getProductsVariationsId>>, TError = GetProductsVariationsId401 | GetProductsVariationsId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsVariationsId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsVariationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Esta rota permite a modifica√ß√£o das informa√ß√µes de uma varia√ß√£o espec√≠fica de produto atrav√©s do seu ID. √â poss√≠vel atualizar dados como pre√ßo, SKU, estoque, caracter√≠sticas espec√≠ficas (tamanho, cor, modelo, etc.) e outras informa√ß√µes relevantes da varia√ß√£o. As altera√ß√µes s√£o aplicadas mantendo o hist√≥rico e integridade dos dados. O acesso a esta funcionalidade requer autentica√ß√£o pr√©via atrav√©s de token JWT v√°lido.
 * @summary Altera as informa√ß√µes de uma varia√ß√£o de produto.
 */
export const getPutProductsVariationsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/variations/${id}`
}

export const putProductsVariationsId = async (id: string,
    putProductsVariationsIdBody: PutProductsVariationsIdBody, options?: RequestInit): Promise<PutProductsVariationsId200> => {
  
  return http<PutProductsVariationsId200>(getPutProductsVariationsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putProductsVariationsIdBody,)
  }
);}




export const getPutProductsVariationsIdMutationOptions = <TError = PutProductsVariationsId401 | PutProductsVariationsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsVariationsId>>, TError,{id: string;data: PutProductsVariationsIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putProductsVariationsId>>, TError,{id: string;data: PutProductsVariationsIdBody}, TContext> => {
    
const mutationKey = ['putProductsVariationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProductsVariationsId>>, {id: string;data: PutProductsVariationsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putProductsVariationsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProductsVariationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProductsVariationsId>>>
    export type PutProductsVariationsIdMutationBody = PutProductsVariationsIdBody
    export type PutProductsVariationsIdMutationError = PutProductsVariationsId401 | PutProductsVariationsId404

    /**
 * @summary Altera as informa√ß√µes de uma varia√ß√£o de produto.
 */
export const usePutProductsVariationsId = <TError = PutProductsVariationsId401 | PutProductsVariationsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProductsVariationsId>>, TError,{id: string;data: PutProductsVariationsIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProductsVariationsId>>,
        TError,
        {id: string;data: PutProductsVariationsIdBody},
        TContext
      > => {

      const mutationOptions = getPutProductsVariationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Esta rota permite a remo√ß√£o de uma varia√ß√£o espec√≠fica de produto atrav√©s do seu ID. A exclus√£o √© permanente e remove todos os dados associados √† varia√ß√£o, incluindo hist√≥rico de estoque, pre√ßos e caracter√≠sticas espec√≠ficas. √â importante notar que esta opera√ß√£o n√£o pode ser desfeita e deve ser utilizada com cautela. A remo√ß√£o de uma varia√ß√£o n√£o afeta o produto base ou outras varia√ß√µes existentes. O acesso a esta funcionalidade requer autentica√ß√£o pr√©via atrav√©s de token JWT v√°lido.
 * @summary Remove uma varia√ß√£o de produto.
 */
export const getDeleteProductsVariationsIdUrl = (id: string,) => {


  

  return `http://localhost:3333/products/variations/${id}`
}

export const deleteProductsVariationsId = async (id: string, options?: RequestInit): Promise<DeleteProductsVariationsId200> => {
  
  return http<DeleteProductsVariationsId200>(getDeleteProductsVariationsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteProductsVariationsIdMutationOptions = <TError = DeleteProductsVariationsId401 | DeleteProductsVariationsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsVariationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsVariationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteProductsVariationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsVariationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductsVariationsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsVariationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsVariationsId>>>
    
    export type DeleteProductsVariationsIdMutationError = DeleteProductsVariationsId401 | DeleteProductsVariationsId404

    /**
 * @summary Remove uma varia√ß√£o de produto.
 */
export const useDeleteProductsVariationsId = <TError = DeleteProductsVariationsId401 | DeleteProductsVariationsId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsVariationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsVariationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsVariationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * O pedido deve conter informa√ß√µes cliente, produtos selecionados (c√≥digo, descri√ß√£o), quantidades solicitadas por item, valores unit√°rios e totais, forma de pagamento e observa√ß√µes adicionais. O sistema calcular√° automaticamente impostos e descontos aplic√°veis. Para utilizar este recurso, √© obrigat√≥rio o envio de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o para autentica√ß√£o do usu√°rio.
 * @summary Registra um novo pedido.
 */
export const getPostOrdersUrl = () => {


  

  return `http://localhost:3333/orders`
}

export const postOrders = async (postOrdersBody: PostOrdersBody, options?: RequestInit): Promise<PostOrders201> => {
  
  return http<PostOrders201>(getPostOrdersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postOrdersBody,)
  }
);}




export const getPostOrdersMutationOptions = <TError = PostOrders400 | PostOrders401 | PostOrders404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext> => {
    
const mutationKey = ['postOrders'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postOrders>>, {data: PostOrdersBody}> = (props) => {
          const {data} = props ?? {};

          return  postOrders(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostOrdersMutationResult = NonNullable<Awaited<ReturnType<typeof postOrders>>>
    export type PostOrdersMutationBody = PostOrdersBody
    export type PostOrdersMutationError = PostOrders400 | PostOrders401 | PostOrders404

    /**
 * @summary Registra um novo pedido.
 */
export const usePostOrders = <TError = PostOrders400 | PostOrders401 | PostOrders404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postOrders>>, TError,{data: PostOrdersBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postOrders>>,
        TError,
        {data: PostOrdersBody},
        TContext
      > => {

      const mutationOptions = getPostOrdersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Lista todos os pedidos cadastrados no sistema. Permite filtrar por data, status, cliente e outros par√¢metros. Os resultados s√£o paginados e podem ser ordenados por diferentes crit√©rios. √â necess√°rio um token JWT v√°lido no cabe√ßalho da requisi√ß√£o para autentica√ß√£o.
 * @summary Retorna uma lista de pedidos.
 */
export const getGetOrdersUrl = (params?: GetOrdersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/orders?${stringifiedParams}` : `http://localhost:3333/orders`
}

export const getOrders = async (params?: GetOrdersParams, options?: RequestInit): Promise<GetOrders200> => {
  
  return http<GetOrders200>(getGetOrdersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOrdersQueryKey = (params?: GetOrdersParams,) => {
    return [`http://localhost:3333/orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({ signal }) => getOrders(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrders>>>
export type GetOrdersQueryError = unknown


export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params: undefined |  GetOrdersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrders>>,
          TError,
          Awaited<ReturnType<typeof getOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrders>>,
          TError,
          Awaited<ReturnType<typeof getOrders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna uma lista de pedidos.
 */

export function useGetOrders<TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params?: GetOrdersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retorna informa√ß√µes detalhadas de um pedido espec√≠fico, incluindo dados do cliente, itens do pedido, valores, status de pagamento e entrega. √â necess√°rio fornecer o ID do pedido como par√¢metro na URL. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Retorna informa√ß√µes detalhadas de um pedido espec√≠fico.
 */
export const getGetOrdersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/orders/${id}`
}

export const getOrdersId = async (id: string, options?: RequestInit): Promise<GetOrdersId200> => {
  
  return http<GetOrdersId200>(getGetOrdersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOrdersIdQueryKey = (id: string,) => {
    return [`http://localhost:3333/orders/${id}`] as const;
    }

    
export const getGetOrdersIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrdersId>>, TError = GetOrdersId401 | GetOrdersId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrdersId>>> = ({ signal }) => getOrdersId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrdersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrdersId>>>
export type GetOrdersIdQueryError = GetOrdersId401 | GetOrdersId404


export function useGetOrdersId<TData = Awaited<ReturnType<typeof getOrdersId>>, TError = GetOrdersId401 | GetOrdersId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getOrdersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersId<TData = Awaited<ReturnType<typeof getOrdersId>>, TError = GetOrdersId401 | GetOrdersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrdersId>>,
          TError,
          Awaited<ReturnType<typeof getOrdersId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrdersId<TData = Awaited<ReturnType<typeof getOrdersId>>, TError = GetOrdersId401 | GetOrdersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna informa√ß√µes detalhadas de um pedido espec√≠fico.
 */

export function useGetOrdersId<TData = Awaited<ReturnType<typeof getOrdersId>>, TError = GetOrdersId401 | GetOrdersId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrdersId>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrdersIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Permite a modifica√ß√£o de informa√ß√µes de um pedido existente, como dados do cliente, itens, quantidades, valores e status. √â necess√°rio fornecer o ID do pedido na URL e os dados atualizados no corpo da requisi√ß√£o. O sistema recalcular√° automaticamente os valores totais e impostos aplic√°veis. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Altera as informa√ß√µes de um pedido existente.
 */
export const getPutOrdersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/orders/${id}`
}

export const putOrdersId = async (id: string,
    putOrdersIdBody: PutOrdersIdBody, options?: RequestInit): Promise<PutOrdersId200> => {
  
  return http<PutOrdersId200>(getPutOrdersIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putOrdersIdBody,)
  }
);}




export const getPutOrdersIdMutationOptions = <TError = PutOrdersId400 | PutOrdersId401 | PutOrdersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrdersId>>, TError,{id: string;data: PutOrdersIdBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putOrdersId>>, TError,{id: string;data: PutOrdersIdBody}, TContext> => {
    
const mutationKey = ['putOrdersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putOrdersId>>, {id: string;data: PutOrdersIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putOrdersId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutOrdersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putOrdersId>>>
    export type PutOrdersIdMutationBody = PutOrdersIdBody
    export type PutOrdersIdMutationError = PutOrdersId400 | PutOrdersId401 | PutOrdersId404

    /**
 * @summary Altera as informa√ß√µes de um pedido existente.
 */
export const usePutOrdersId = <TError = PutOrdersId400 | PutOrdersId401 | PutOrdersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putOrdersId>>, TError,{id: string;data: PutOrdersIdBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putOrdersId>>,
        TError,
        {id: string;data: PutOrdersIdBody},
        TContext
      > => {

      const mutationOptions = getPutOrdersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Remove permanentemente um pedido espec√≠fico do sistema. Esta opera√ß√£o n√£o pode ser desfeita e s√≥ deve ser utilizada em casos espec√≠ficos, como corre√ß√£o de erros de cadastro. Para pedidos que precisam ser cancelados mas mantidos no hist√≥rico, utilize a altera√ß√£o de status ao inv√©s da remo√ß√£o. √â necess√°rio fornecer o ID do pedido como par√¢metro na URL. Requer autentica√ß√£o atrav√©s de um token JWT v√°lido no cabe√ßalho da requisi√ß√£o.
 * @summary Remove um pedido existente.
 */
export const getDeleteOrdersIdUrl = (id: string,) => {


  

  return `http://localhost:3333/orders/${id}`
}

export const deleteOrdersId = async (id: string, options?: RequestInit): Promise<DeleteOrdersId200> => {
  
  return http<DeleteOrdersId200>(getDeleteOrdersIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteOrdersIdMutationOptions = <TError = DeleteOrdersId401 | DeleteOrdersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteOrdersId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrdersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteOrdersId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrdersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrdersId>>>
    
    export type DeleteOrdersIdMutationError = DeleteOrdersId401 | DeleteOrdersId404

    /**
 * @summary Remove um pedido existente.
 */
export const useDeleteOrdersId = <TError = DeleteOrdersId401 | DeleteOrdersId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrdersId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrdersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteOrdersIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Gera uma URL de autentica√ß√£o para integra√ß√£o com a API da Shopee. Esta URL √© necess√°ria para obter as credenciais de acesso e permitir que o sistema se conecte com a plataforma Shopee.
 * @summary Retorna a URL para autentica√ß√£o do Shopee.
 */
export const getGetShopeeAuthUrlUrl = () => {


  

  return `http://localhost:3333/shopee/auth/url`
}

export const getShopeeAuthUrl = async ( options?: RequestInit): Promise<GetShopeeAuthUrl200> => {
  
  return http<GetShopeeAuthUrl200>(getGetShopeeAuthUrlUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetShopeeAuthUrlQueryKey = () => {
    return [`http://localhost:3333/shopee/auth/url`] as const;
    }

    
export const getGetShopeeAuthUrlQueryOptions = <TData = Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError = GetShopeeAuthUrl401>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetShopeeAuthUrlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getShopeeAuthUrl>>> = ({ signal }) => getShopeeAuthUrl({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetShopeeAuthUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getShopeeAuthUrl>>>
export type GetShopeeAuthUrlQueryError = GetShopeeAuthUrl401


export function useGetShopeeAuthUrl<TData = Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError = GetShopeeAuthUrl401>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getShopeeAuthUrl>>,
          TError,
          Awaited<ReturnType<typeof getShopeeAuthUrl>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetShopeeAuthUrl<TData = Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError = GetShopeeAuthUrl401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getShopeeAuthUrl>>,
          TError,
          Awaited<ReturnType<typeof getShopeeAuthUrl>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetShopeeAuthUrl<TData = Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError = GetShopeeAuthUrl401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna a URL para autentica√ß√£o do Shopee.
 */

export function useGetShopeeAuthUrl<TData = Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError = GetShopeeAuthUrl401>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getShopeeAuthUrl>>, TError, TData>>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetShopeeAuthUrlQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Realiza a autentica√ß√£o e vincula√ß√£o de uma conta Shopee ao sistema atrav√©s do c√≥digo de autoriza√ß√£o obtido no processo de autentica√ß√£o. Este endpoint processa o c√≥digo recebido e estabelece as credenciais necess√°rias para futuras intera√ß√µes com a API da Shopee.
 * @summary Realiza autentica√ß√£o e vincula√ß√£o da conta Shopee ao sistema.
 */
export const getPostShopeeAuthTokenUrl = () => {


  

  return `http://localhost:3333/shopee/auth/token`
}

export const postShopeeAuthToken = async (postShopeeAuthTokenBody: PostShopeeAuthTokenBody, options?: RequestInit): Promise<PostShopeeAuthToken200> => {
  
  return http<PostShopeeAuthToken200>(getPostShopeeAuthTokenUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postShopeeAuthTokenBody,)
  }
);}




export const getPostShopeeAuthTokenMutationOptions = <TError = PostShopeeAuthToken400 | PostShopeeAuthToken401 | PostShopeeAuthToken404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeAuthToken>>, TError,{data: PostShopeeAuthTokenBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postShopeeAuthToken>>, TError,{data: PostShopeeAuthTokenBody}, TContext> => {
    
const mutationKey = ['postShopeeAuthToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postShopeeAuthToken>>, {data: PostShopeeAuthTokenBody}> = (props) => {
          const {data} = props ?? {};

          return  postShopeeAuthToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostShopeeAuthTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postShopeeAuthToken>>>
    export type PostShopeeAuthTokenMutationBody = PostShopeeAuthTokenBody
    export type PostShopeeAuthTokenMutationError = PostShopeeAuthToken400 | PostShopeeAuthToken401 | PostShopeeAuthToken404

    /**
 * @summary Realiza autentica√ß√£o e vincula√ß√£o da conta Shopee ao sistema.
 */
export const usePostShopeeAuthToken = <TError = PostShopeeAuthToken400 | PostShopeeAuthToken401 | PostShopeeAuthToken404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeAuthToken>>, TError,{data: PostShopeeAuthTokenBody}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postShopeeAuthToken>>,
        TError,
        {data: PostShopeeAuthTokenBody},
        TContext
      > => {

      const mutationOptions = getPostShopeeAuthTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getPostShopeeOrderImportUrl = (params: PostShopeeOrderImportParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:3333/shopee/order/import?${stringifiedParams}` : `http://localhost:3333/shopee/order/import`
}

export const postShopeeOrderImport = async (params: PostShopeeOrderImportParams, options?: RequestInit): Promise<PostShopeeOrderImport200> => {
  
  return http<PostShopeeOrderImport200>(getPostShopeeOrderImportUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getPostShopeeOrderImportMutationOptions = <TError = PostShopeeOrderImport400 | PostShopeeOrderImport401 | PostShopeeOrderImport404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeOrderImport>>, TError,{params: PostShopeeOrderImportParams}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postShopeeOrderImport>>, TError,{params: PostShopeeOrderImportParams}, TContext> => {
    
const mutationKey = ['postShopeeOrderImport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postShopeeOrderImport>>, {params: PostShopeeOrderImportParams}> = (props) => {
          const {params} = props ?? {};

          return  postShopeeOrderImport(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostShopeeOrderImportMutationResult = NonNullable<Awaited<ReturnType<typeof postShopeeOrderImport>>>
    
    export type PostShopeeOrderImportMutationError = PostShopeeOrderImport400 | PostShopeeOrderImport401 | PostShopeeOrderImport404

    export const usePostShopeeOrderImport = <TError = PostShopeeOrderImport400 | PostShopeeOrderImport401 | PostShopeeOrderImport404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeOrderImport>>, TError,{params: PostShopeeOrderImportParams}, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postShopeeOrderImport>>,
        TError,
        {params: PostShopeeOrderImportParams},
        TContext
      > => {

      const mutationOptions = getPostShopeeOrderImportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getPostShopeeDownloadShippingDocumentUrl = () => {


  

  return `http://localhost:3333/shopee/download/shipping-document`
}

export const postShopeeDownloadShippingDocument = async ( options?: RequestInit): Promise<void> => {
  
  return http<void>(getPostShopeeDownloadShippingDocumentUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getPostShopeeDownloadShippingDocumentMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>, TError,void, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>, TError,void, TContext> => {
    
const mutationKey = ['postShopeeDownloadShippingDocument'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>, void> = () => {
          

          return  postShopeeDownloadShippingDocument(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostShopeeDownloadShippingDocumentMutationResult = NonNullable<Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>>
    
    export type PostShopeeDownloadShippingDocumentMutationError = unknown

    export const usePostShopeeDownloadShippingDocument = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>, TError,void, TContext>, request?: SecondParameter<typeof http>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postShopeeDownloadShippingDocument>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostShopeeDownloadShippingDocumentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
