/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/http/client'
import type { RequestConfig, ResponseErrorConfig } from '@/http/client'
import type {
  PostSessionsPasswordMutationRequestType,
  PostSessionsPasswordMutationResponseType,
  PostSessionsPassword400Type,
} from '../types/Usu\u00E1riosTypes/PostSessionsPasswordType'

function getPostSessionsPasswordUrl() {
  return '/sessions/password' as const
}

/**
 * @description Utilize esta função para autenticar um usuário. Esta rota retorna um token JWT que deve ser enviado no header da requisição como Bearer Token. O token é válido por 7 dias e pode ser utilizado para autenticar o usuário em futuras requisições. Caso o email ou a senha estejam incorretos, a rota retorna um erro 401 com a descrição "Invalid email or password".
 * @summary Autentica um usuário.
 * {@link /sessions/password}
 */
export async function postSessionsPassword(
  data: PostSessionsPasswordMutationRequestType,
  config: Partial<RequestConfig<PostSessionsPasswordMutationRequestType>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostSessionsPasswordMutationResponseType,
    ResponseErrorConfig<PostSessionsPassword400Type>,
    PostSessionsPasswordMutationRequestType
  >({ method: 'POST', url: getPostSessionsPasswordUrl().toString(), data, ...requestConfig })
  return res.data
}