/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'
import type {
  PutCustomersId200Type,
  PutCustomersId401Type,
  PutCustomersId404Type,
  PutCustomersIdMutationRequestType,
  PutCustomersIdMutationResponseType,
  PutCustomersIdPathParamsType,
} from '../../types/ClientesTypes/PutCustomersIdType'

export const putCustomersIdPathParamsSchema = z.object({
  id: z.string(),
}) as unknown as ToZod<PutCustomersIdPathParamsType>

/**
 * @description Cliente atualizado com sucesso.
 */
export const putCustomersId200Schema = z
  .enum(['null'])
  .describe('Cliente atualizado com sucesso.')
  .nullable() as unknown as ToZod<PutCustomersId200Type>

/**
 * @description Usuário não autenticado.
 */
export const putCustomersId401Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Usuário não autenticado.'
  ) as unknown as ToZod<PutCustomersId401Type>

/**
 * @description Cliente não encontrado.
 */
export const putCustomersId404Schema = z
  .object({
    message: z.string(),
  })
  .describe(
    'Cliente não encontrado.'
  ) as unknown as ToZod<PutCustomersId404Type>

export const putCustomersIdMutationRequestSchema = z.object({
  name: z.string().min(1),
  phone: z.string().min(1),
  phone_2: z.string().optional(),
  document_type: z.enum(['PERSON', 'COMPANY']),
  document: z.string().min(1),
  document_2: z.string().optional(),
  email: z.string().email().min(1),
  state_registration: z.string().optional(),
  tax_free: z.boolean().optional(),
  gender: z.enum(['MALE', 'FEMALE']).optional(),
  birth_date: z.string().datetime({ offset: true }).optional(),
  problematic: z.boolean().optional(),
  address_id: z
    .string()
    .regex(/^[cC][^\s-]{8,}$/)
    .min(1),
  recipient_name: z.string().min(1),
  recipient_phone: z.string().min(1),
  cep: z.string().min(1),
  street: z.string().min(1),
  number: z.string().min(1),
  complement: z.string().optional(),
  neighborhood: z.string().min(1),
  city: z.string().min(1),
  state: z.string().min(1),
}) as unknown as ToZod<PutCustomersIdMutationRequestType>

export const putCustomersIdMutationResponseSchema = z.lazy(
  () => putCustomersId200Schema
) as unknown as ToZod<PutCustomersIdMutationResponseType>
