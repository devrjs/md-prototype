/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'
import type {
  GetCustomers200Type,
  GetCustomers401Type,
  GetCustomers404Type,
  GetCustomersQueryParamsType,
  GetCustomersQueryResponseType,
} from '../../types/ClientesTypes/GetCustomersType'

export const getCustomersQueryParamsSchema = z
  .object({
    perPage: z.number().default(10),
    pageIndex: z.number().default(0),
    orderBy: z.enum(['desc', 'asc']).default('desc'),
    customerName: z.string().optional(),
    customerDocument: z.string().optional(),
  })
  .optional() as unknown as ToZod<GetCustomersQueryParamsType>

/**
 * @description Clientes obtidos com sucesso.
 */
export const getCustomers200Schema = z
  .object({
    totalCount: z.number(),
    pageCount: z.number(),
    customers: z.array(
      z.object({
        id: z.string(),
        name: z.string(),
        document_type: z.enum(['PERSON', 'COMPANY']),
        document: z.string(),
        user_id: z.string(),
        entry_number: z.number(),
        person_id: z.string(),
      })
    ),
  })
  .describe(
    'Clientes obtidos com sucesso.'
  ) as unknown as ToZod<GetCustomers200Type>

/**
 * @description Usuário não autenticado.
 */
export const getCustomers401Schema = z
  .object({
    message: z.string(),
  })
  .describe('Usuário não autenticado.') as unknown as ToZod<GetCustomers401Type>

/**
 * @description Cliente não encontrado.
 */
export const getCustomers404Schema = z
  .object({
    message: z.string(),
  })
  .describe('Cliente não encontrado.') as unknown as ToZod<GetCustomers404Type>

export const getCustomersQueryResponseSchema = z.lazy(
  () => getCustomers200Schema
) as unknown as ToZod<GetCustomersQueryResponseType>
