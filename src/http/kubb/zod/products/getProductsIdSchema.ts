/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ToZod } from '@kubb/plugin-zod/utils'
import type {
  GetProductsIdPathParamsType,
  GetProductsId200Type,
  GetProductsId401Type,
  GetProductsId404Type,
  GetProductsIdQueryResponseType,
} from '../../types/products/GetProductsIdType'
import { z } from 'zod'

export const getProductsIdPathParamsSchema = z.object({
  id: z.string(),
}) as unknown as ToZod<GetProductsIdPathParamsType>

/**
 * @description Produto obtido com sucesso.
 */
export const getProductsId200Schema = z
  .object({
    id: z.string(),
    reference_code: z.string().min(1),
    product_sku: z.string().min(1),
    name: z.string().min(1),
    model: z.string().nullable(),
    description: z.string().nullable(),
    ncm: z.number().int().nullable(),
    cfop: z.number().int().nullable(),
    cest: z.string().nullable(),
    merchandise_origin: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    product_measurement_unit: z
      .object({
        id: z.string(),
        name: z.string(),
        acronym: z.string(),
      })
      .nullable(),
    product_brand: z
      .object({
        id: z.string(),
        name: z.string(),
        reference_code: z.string(),
        created_at: z.string().datetime({ offset: true }),
      })
      .nullable(),
    product_categories: z.array(
      z.object({
        id: z.string(),
        name: z.string(),
        created_at: z.string().datetime({ offset: true }),
      }),
    ),
  })
  .describe('Produto obtido com sucesso.') as unknown as ToZod<GetProductsId200Type>

/**
 * @description Usuário não autenticado.
 */
export const getProductsId401Schema = z
  .object({
    message: z.string(),
  })
  .describe('Usuário não autenticado.') as unknown as ToZod<GetProductsId401Type>

/**
 * @description Produto não encontrado.
 */
export const getProductsId404Schema = z
  .object({
    message: z.string(),
  })
  .describe('Produto não encontrado.') as unknown as ToZod<GetProductsId404Type>

export const getProductsIdQueryResponseSchema = z.lazy(() => getProductsId200Schema) as unknown as ToZod<GetProductsIdQueryResponseType>