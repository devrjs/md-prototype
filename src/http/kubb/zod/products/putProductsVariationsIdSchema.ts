/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ToZod } from '@kubb/plugin-zod/utils'
import type {
  PutProductsVariationsIdPathParamsType,
  PutProductsVariationsId200Type,
  PutProductsVariationsId401Type,
  PutProductsVariationsId404Type,
  PutProductsVariationsIdMutationRequestType,
  PutProductsVariationsIdMutationResponseType,
} from '../../types/products/PutProductsVariationsIdType'
import { z } from 'zod'

export const putProductsVariationsIdPathParamsSchema = z.object({
  id: z.string(),
}) as unknown as ToZod<PutProductsVariationsIdPathParamsType>

/**
 * @description Variação atualizada com sucesso.
 */
export const putProductsVariationsId200Schema = z
  .enum(['null'])
  .describe('Variação atualizada com sucesso.')
  .nullable() as unknown as ToZod<PutProductsVariationsId200Type>

/**
 * @description Usuário não autenticado.
 */
export const putProductsVariationsId401Schema = z
  .object({
    message: z.string(),
  })
  .describe('Usuário não autenticado.') as unknown as ToZod<PutProductsVariationsId401Type>

/**
 * @description Variação não encontrada.
 */
export const putProductsVariationsId404Schema = z
  .object({
    message: z.string(),
  })
  .describe('Variação não encontrada.') as unknown as ToZod<PutProductsVariationsId404Type>

export const putProductsVariationsIdMutationRequestSchema = z.object({
  product_id: z.string().regex(/^[cC][^\s-]{8,}$/),
  barcode: z.string().optional(),
  name: z.string().min(1),
  length_in_centimeters: z.number().optional(),
  height_in_centimeters: z.number().optional(),
  width_in_centimeters: z.number().optional(),
  weight_in_grams: z.number().optional(),
  average_cost: z.number(),
  cost_price: z.number(),
  selling_price: z.number(),
  suggested_maximum_discount: z.number().optional(),
  promotion_starts_at: z.string().datetime({ offset: true }).optional(),
  promotion_ends_at: z.string().datetime({ offset: true }).optional(),
  product_storage_location: z.string().optional(),
  product_condition: z.string(),
  product_expiration_date: z.string().datetime({ offset: true }).optional(),
  warranty_date: z.string().datetime({ offset: true }).optional(),
  current_stock: z.number(),
  minimum_stock_level: z.number(),
  products_in_review: z.number(),
  update_stock: z.boolean().optional(),
  track_inventory: z.boolean().optional(),
  is_available: z.boolean().optional(),
}) as unknown as ToZod<PutProductsVariationsIdMutationRequestType>

export const putProductsVariationsIdMutationResponseSchema = z.lazy(
  () => putProductsVariationsId200Schema,
) as unknown as ToZod<PutProductsVariationsIdMutationResponseType>