/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ToZod } from '@kubb/plugin-zod/utils'
import type {
  GetProductsVariationsQueryParamsType,
  GetProductsVariations200Type,
  GetProductsVariations401Type,
  GetProductsVariations404Type,
  GetProductsVariationsQueryResponseType,
} from '../../types/Produtos (Varia\u00E7\u00F5es)Types/GetProductsVariationsType.ts'
import { z } from 'zod'

export const getProductsVariationsQueryParamsSchema = z
  .object({
    perPage: z.number().default(10),
    pageIndex: z.number().default(0),
    orderBy: z.enum(['desc', 'asc']).default('desc'),
    productId: z.string().optional(),
    productVariationName: z.string().optional(),
  })
  .optional() as unknown as ToZod<GetProductsVariationsQueryParamsType>

/**
 * @description Variações de produtos obtidos com sucesso.
 */
export const getProductsVariations200Schema = z
  .object({
    totalCount: z.number(),
    pageCount: z.number(),
    productVariations: z.array(
      z.object({
        id: z.string(),
        barcode: z.string().nullable(),
        name: z.string().min(1),
        average_cost: z.number(),
        cost_price: z.number(),
        selling_price: z.number(),
        product_storage_location: z.string().nullable(),
        current_stock: z.number(),
        minimum_stock_level: z.number(),
        products_in_review: z.number(),
        track_inventory: z.boolean().optional(),
        is_available: z.boolean().optional(),
        created_at: z.string().datetime({ offset: true }),
        product_id: z.string(),
      }),
    ),
  })
  .describe('Variações de produtos obtidos com sucesso.') as unknown as ToZod<GetProductsVariations200Type>

/**
 * @description Usuário não autenticado.
 */
export const getProductsVariations401Schema = z
  .object({
    message: z.string(),
  })
  .describe('Usuário não autenticado.') as unknown as ToZod<GetProductsVariations401Type>

/**
 * @description Variações de produtos não encontrado.
 */
export const getProductsVariations404Schema = z
  .object({
    message: z.string(),
  })
  .describe('Variações de produtos não encontrado.') as unknown as ToZod<GetProductsVariations404Type>

export const getProductsVariationsQueryResponseSchema = z.lazy(() => getProductsVariations200Schema) as unknown as ToZod<GetProductsVariationsQueryResponseType>